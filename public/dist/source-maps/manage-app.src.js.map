{"version":3,"sources":["ManageAppIgniter.js","ManageMasterEngine.js","ManageUserDataService.js","ManageUserEngine.js","UserDataService.js","UserEngine.js","ConfigurationDataService.js","ConfigurationEngine.js","RolePermissionDataServices.js","RolePermissionEngine.js","ActivityDataServices.js","ActivityEngine.js","ProjectDataServices.js","ProjectEngine.js","ArticleDataServices.js","ArticleEngine.js","LanguageDataServices.js","LanguageEngine.js","VersionDataServices.js","VersionEngine.js"],"names":[],"mappingsftthnxnxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7tBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1orhfile":"../Start/manage-app.src.js","sourcesContent":["(function() {\n'use strict';\n\n  angular.module('ManageApp', [\n    'ngMessages',\n    'ngAnimate',\n    'ngSanitize',\n    'ui.router',\n    'ui.tree',\n    'ngNotify',\n    'ngDialog',\n    'angular-loading-bar',\n    'selectize',\n    'NgSwitchery',\n    'lw.core.utils',\n    'lw.security.main',\n    'lw.auth',\n    'lw.data.datastore',\n    'lw.data.datatable',\n    'lw.form.main',\n    'app.service',\n    'app.http',\n    'app.notification',\n    'app.form',\n    'app.directives',\n    'app.fileUploader',\n    'ManageApp.master',\n    'app.UploaderDataService',\n    'app.UploaderEngine',\n\n    'ManageApp.ManageUserDataService',\n    'ManageApp.users',\n\n    'CommonApp.CommonUserDataService',\n    'CommonApp.users',\n\n    'Manage-app.users',\n    'ManageApp.UserDataService',\n\n    'ManageApp.ConfigurationDataService',\n    'ManageApp.configuration',\n\n    'app.RolePermissionDataServices',\n    'app.RolePermissionEngine',\n\n \t'app.ActivityDataServices',\n\t'app.ActivityEngine',\n\n\t'app.ProjectDataServices',\n\t'app.ProjectEngine',\n\n\t'app.ArticleDataServices',\n\t'app.ArticleEngine',\n\n\t'app.LanguageDataServices',\n    'app.LanguageEngine',\n\n\t'app.VersionDataServices', \n\t'app.VersionEngine'\n\n  ]).\n  //constant('__ngSupport', window.__ngSupport).\n  run([\n    '__Auth', '$state', '$rootScope', '$transitions','$trace', function(__Auth, $state, $rootScope, $transitions, $trace) {\n\n        _.delay(function() {\n\n            __Auth.verifyRoute($state);\n            /* $rootScope.$on('$viewContentLoading', function(event, viewConfig) {\n\n                var accessObject = $state.current;\n\n                if( accessObject  && _.has( accessObject, 'loginRequired' ) && accessObject.loginRequired === false) {\n\n                    if (__Auth.isLoggedIn()) {\n                        $state.go( 'project' );\n                    }\n\n                    event.preventDefault();\n\n                    return false;\n                }\n            });\n */\n        }, 100);\n\n        $rootScope.__ngSupport = window.__ngSupport;\n\n    }\n  ]).\n  config([\n    '$stateProvider', '$urlRouterProvider', '$interpolateProvider','$compileProvider', routes\n  ]);\n\n\n  /**\n    * Application Routes Configuration\n    *\n    * @inject $stateProvider\n    * @inject $urlRouterProvider\n    * @inject $interpolateProvider\n    * @inject $compileProvider\n    *\n    * @return void\n    *---------------------------------------------------------------- */\n\n  function routes($stateProvider, $urlRouterProvider, $interpolateProvider, $compileProvider) {\n\n    if( window.appConfig && window.appConfig.debug === false) {\n        $compileProvider.debugInfoEnabled(false);\n    }\n\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n\n    $urlRouterProvider.otherwise(function($injector, $location, $transitions) {\n       var state = $injector.get('$state'),\n            auth = $injector.get('__Auth'),\n            redirectState = __globals.appTemps('stateViaRoute');\n        if(_.has(redirectState, 'stateName')\n            && !_.isUndefined(redirectState.stateName)\n            && !_.isEmpty(redirectState.stateName)) {\n            if (_.isEmpty(redirectState.stateParams)) {\n                state.go(redirectState.stateName);\n            } else {\n                state.go(redirectState.stateName, redirectState.stateParams);\n            }\n        } else {\n            state.go('project');\n        }\n\n        return $location.path();\n    });\n\n    //state configurations\n    $stateProvider\n\n        .state('base', {\n            abstract: true,\n            resolve: {\n                baseData: ['$stateParams', 'BaseDataService', function($stateParams, BaseDataService) {\n                    return BaseDataService.getBaseData('account_logged');\n                }]\n        }})\n\n        // login\n        .state('login',\n            __globals.stateConfig('/login', 'user.login', {\n                parent : 'base',\n                access  : {\n                    authority : 'user.login.process'\n                }\n            }) )\n\n        // forgot password\n        .state('forgot_password',\n            __globals.stateConfig('/forgot-password', 'user.forgot-password', {\n                parent : 'base',\n                access  : {\n                    authority : 'user.forgot_password.process'\n                }\n            })\n        )\n\n\t\t// forgot password\n        .state('reset_password',\n            __globals.stateConfig('/reset-password/{reminderToken}', 'user.reset-password', {\n                parent  : 'base',\n                access  : {\n                    authority : 'user.reset_password.process'\n                }\n            })\n        )\n\n        // Forgot Password Success\n        .state('forgot_password_sucess',\n            __globals.stateConfig('/forgot-password', 'user.forgot-password-success')\n        )\n\n        // home\n        .state('home',\n             __globals.stateConfig('/home', 'home', {\n                access  : {\n                    authority : 'public.app'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // invalid request\n        .state('invalid_request', __globals.stateConfig('/invalid-request',\n            'errors/invalid-request'\n        ))\n\n        // not found\n        .state('not_found', __globals.stateConfig('/not-found',\n            'errors.manage-not-exist'\n        ))\n\n        // not exist\n        .state('not_exist', __globals.stateConfig('/not-exist',\n            'errors.manage-not-exist'\n        ))\n\n        // unauthorized\n        .state('unauthorized', __globals.stateConfig('/unauthorized',\n            'errors.unauthorized'\n\t\t))\n\n        // users\n        .state('users',\n             __globals.stateConfig('/users', 'user/manage/list', {\n                controller : 'ManageUsersController as manageUsersCtrl',\n                access  : {\n                    authority : 'manage.user.read.datatable.list'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // RolePermission list\n        .state('role_permission',\n            __globals.stateConfig('/role-permissions', 'user/role-permission/list', {\n            access  : {\n                authority:'manage.user.role_permission.read.list'\n            },\n            controller : 'RolePermissionListController as rolePermissionListCtrl',\n            parent : 'base'\n        } ))\n\n        // profile\n        .state('profile',\n             __globals.stateConfig('/profile', 'user/manage-profile', {\n                access  : {\n                    authority : 'user.profile.update'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // profile edit\n        .state('profileEdit',\n             __globals.stateConfig('/profile/edit', 'user/profile-edit', {\n                access  : {\n                    authority : 'user.profile.update.process'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // change password\n        .state('changePassword',\n             __globals.stateConfig('/change-password', 'user/change-password', {\n                access  : {\n                    authority : 'user.change_password.process'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // change email\n        .state('changeEmail',\n             __globals.stateConfig('/change-email', 'user/change-email', {\n                access  : {\n                    authority : 'user.change_email.process'\n                },\n                parent : 'base'\n              }\n            )\n        )\n\n        // activity log\n        .state('activity_log',\n\t\t\t__globals.stateConfig('/activity-log', 'activity/activity-log', {\n            \tcontroller  : 'ActivityLogListController as activityLogListCtrl',\n                parent : 'base',\n                access  : {\n                    authority : 'manage.activity_log.read.list'\n                }\n        } ))\n\n        // configuration general\n        .state('configuration_general',\n\t\t\t__globals.stateConfig('/general', 'configuration.general', {\n                parent : 'base',\n                controller  : 'GeneralController as generalCtrl',\n                access  : {\n                    authority : 'manage.configuration.process'\n                },\n                resolve: {\n                    getGeneralData: [\"ConfigurationDataService\", function(ConfigurationDataService) {\n\t\t\t\t\t\treturn ConfigurationDataService\n\t\t\t\t\t\t\t.readConfigurationData(1) // general form\n\t\t\t\t\t\t\t.then(function(response) {\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t});\n                    }]\n                },\n                parent : 'base'\n            }) )\n\n\n        // Project list\n        .state('project',\n            __globals.stateConfig('/projects', 'project/list', {\n            access  : {\n            \tauthority : 'manage.project.read.list'\n            },\n            controller : 'ProjectListController as projectListCtrl',\n            parent : 'base'\n        } ))\n\n        // Article list\n        .state('project_articles',\n            __globals.stateConfig('/project/:projectUid/:versionUid/articles', 'article/list', {\n            access  : {\n            \tauthority : 'manage.article.read.list'\n            },\n            controller : 'ArticleListController as articleListCtrl',\n            parent : 'base',\n            resolve : {\n                GetVersionDetails : ['VersionDataService', '$stateParams', function(VersionDataService, $stateParams) {\n                    return VersionDataService\n                            .getVersionSupportData($stateParams.projectUid, $stateParams.versionUid);\n                }],\n                GetArticles : ['ArticleDataService', '$stateParams', function(ArticleDataService, $stateParams) {\n                    return ArticleDataService\n                            .getArticles($stateParams.projectUid, $stateParams.versionUid);\n                }]\n            }\n        } ))\n\n        // Article add dialog\n       .state('project_article_add',\n            __globals.stateConfig('/project/:projectUid/:versionUid/article/:requestType/add', 'article/add', {\n            access  : {\n                authority : 'manage.article.write.create'\n            },\n            controller : 'ArticleAddController as ArticleAddCtrl',\n            parent : 'base',\n            resolve : {\n                articleAddData : ['ArticleDataService', '$stateParams', function(ArticleDataService, $stateParams) {\n                    return ArticleDataService.getAddSupportData($stateParams.projectUid, $stateParams.versionUid);\n                }],\n                GetVersionDetails : ['VersionDataService', '$stateParams', function(VersionDataService, $stateParams) {\n                    return VersionDataService\n                            .getVersionSupportData($stateParams.projectUid, $stateParams.versionUid);\n                }]\n            }\n\n        } ))\n\n       // add sub article\n       .state('project_subarticle_add',\n            __globals.stateConfig('/project/:projectUid/:versionUid/:prevArticle/article/:requestType/add', 'article/add', {\n            access  : {\n                authority : 'manage.article.write.create'\n            },\n            controller : 'ArticleAddController as ArticleAddCtrl',\n            parent : 'base',\n            resolve : {\n                articleAddData : ['ArticleDataService', '$stateParams', function(ArticleDataService, $stateParams) {\n                    return ArticleDataService.getAddSupportData($stateParams.projectUid, $stateParams.versionUid);\n                }]\n            },\n            parent : 'base'\n\n        } ))\n\n        // Article edit dialog\n       .state('project_article_edit',\n       \t\t__globals.stateConfig( '/project/:projectUid/:versionUid/article/:articleIdOrUid/edit', 'article/edit', {\n            access  : {\n                authority : 'manage.article.read.update.data'\n            },\n            controller : 'ArticleEditController as articleEditCtrl',\n            parent : 'base',\n            resolve : {\n                articleEditData : ['ArticleDataService', '$stateParams', function(ArticleDataService, $stateParams) {\n                    return ArticleDataService\n                            .getEditSupportData($stateParams.articleIdOrUid, $stateParams.projectUid, $stateParams.versionUid);\n                }]\n            },\n            parent : 'base'\n        } ))\n\n        // Article list\n        .state('article',\n            __globals.stateConfig('/articles', 'article/list', {\n            access  : {\n            \tauthority : 'manage.article.read.list'\n            },\n            controller : 'ArticleListController as articleListCtrl',\n            parent : 'base'\n        } ))\n\n        // Article add dialog\n       .state('article_add',\n            __globals.stateConfig('/article-add', 'article/add', {\n            access  : {\n                authority : 'manage.article.write.create'\n            },\n            controller : 'ArticleAddController as ArticleAddCtrl',\n            parent : 'base',\n            resolve : {\n                articleAddData : ['ArticleDataService', function(ArticleDataService) {\n                    return ArticleDataService.getAddSupportData();\n                }]\n            }\n\n        } ))\n\n        // Article edit dialog\n       .state('article_edit', __globals.stateConfig( '/:articleIdOrUid/edit', 'article/edit', {\n            access  : {\n                authority : 'manage.article.write.update'\n            },\n            controller : 'ArticleEditController as articleEditCtrl',\n            parent : 'base',\n            resolve : {\n                articleEditData : ['ArticleDataService', '$stateParams', function(ArticleDataService, $stateParams) {\n                    return ArticleDataService\n                            .getEditSupportData($stateParams.articleIdOrUid);\n                }]\n            }\n        } ))\n\n       \t// Article details dialog\n       \t.state('article_details', __globals.stateConfig( '/article/:articleIdOrUid/:requestType/details', 'article/details', {\n            access  : {\n                authority : 'manage.article.read.details'\n            },\n            controller : 'ArticleDetailsController as ArticleDetailsCtrl',\n            parent : 'base',\n            resolve : {\n                ArticleData : ['ArticleDataService', '$stateParams', function(ArticleDataService, $stateParams) {\n\t\t\t\t\treturn ArticleDataService.getArticleDetails($stateParams.articleIdOrUid);\n\t\t\t\t}]\n            }\n        } ))\n\n\n         // Language list\n        .state('language',\n            __globals.stateConfig('/languages', 'language/list', {\n            access  : {\n                authority : 'manage.language.read.list'\n            },\n            controller : 'LanguageListController as languageListCtrl',\n            parent : 'base'\n        } ))\n        \n         // Version list\n        .state('project_versions', \n            __globals.stateConfig('/project/{projectIdOrUid}/versions', 'version/list', {\n            access  : {\n                authority : 'manage.project.version.read.list'\n            },\n            parent : 'base',\n            controller : 'VersionListController as versionListCtrl',\n            resolve : {\n                ProjectInfo : [\"VersionDataService\", \"$stateParams\", function(VersionDataService, $stateParams) {\n                    return VersionDataService.getProjectInfo($stateParams.projectIdOrUid);\n                }],\n                GetVersions : [\"VersionDataService\", \"$stateParams\", function(VersionDataService, $stateParams) {\n                    return VersionDataService.getVersions($stateParams.projectIdOrUid);\n                }]\n            }\n        } ))\n\n        \n        // Version add dialog\n        .state('version.add', \n            __globals.stateConfig('/project-add', null, {\n            access  : {\n                authority : 'manage.project.version.write.create'\n            },\n            controller : 'VersionAddDialogController',\n            resolve : {\n                versionAddData : function(VersionDataService) {\n                    return VersionDataService.getAddSupportData();\n                }\n            }\n\n        } ))\n\n        \n        // Version edit dialog\n        .state('version.edit', __globals.stateConfig( '/:projectIdOrUid/edit', null, {\n            access  : {\n                authority : 'manage.project.version.write.update'\n            },\n            controller : 'VersionEditDialogController as versionEditDialogCtrl',\n            resolve : {\n                versionEditData : function(VersionDataService, $stateParams) {\n                    return VersionDataService\n                            .getEditSupportData($stateParams.projectIdOrUid);\n                }\n            }\n \n         } ))\n\n\n        ;\n    };\n})();","(function() {\n'use strict';\n\n\t/*\n\t ManageController\n\t-------------------------------------------------------------------------- */\n\n\tangular\n        .module('ManageApp.master', [])\n        .controller('ManageController', \t[\n\t\t\t'$rootScope',\n            '__DataStore',\n            '$scope',\n            '__Auth',\n            'appServices',\n            'appNotify',\n\t\t\t'__Form',\n\t\t\t'$state',\n\t\t\t'appToastNotify',\n            'ConfigurationDataService',\n            ManageController\n\t \t]);\n\n /**\n\t* ManageController for manage page application\n\t*\n\t* @inject $rootScope\n\t* @inject __DataStore\n\t* @inject $scope\n\t* @inject __Auth\n\t* @inject appServices\n\t* @inject appNotify\n\t*\n\t* @return void\n\t*-------------------------------------------------------- */\n\n\tfunction ManageController($rootScope, __DataStore, $scope, __Auth,  appServices, appNotify, __Form, $state, appToastNotify, ConfigurationDataService) {\n\n\t \tvar scope \t= this;\n\n        scope.dropdown_menu = __globals.getAppImmutables('dropdown_menu');\n\n        scope.pageStatus    = false;\n\n\t\tscope.refreshAuthObj = function() {\n            \n            __Auth.refresh(function(authInfo) {\n\n\t\t \t\tscope.auth_info = authInfo;\n\t\t \t});\n\n        };\n\t\tscope.refreshAuthObj();        \n\n        scope.notify = __globals.getAppImmutables('notifyToAdmin');\n        scope.restrict_user_email_update = __globals.getAppImmutables('restrict_user_email_update');\n\n        scope.unhandledError = function() {\n\n            appNotify.error(__globals.getReactionMessage(19)); // Unhanded errors\n\n        };\n\n        $rootScope.isAdmin = function() {\n           return scope.auth_info.designation === 1;\n        };\n\n        $rootScope.$on('auth_info_updated', function (event, args) {\n            $rootScope.auth_info = args.auth_info;\n            if (!_.isEmpty(args.userFullName)) {\n                scope.userUpdateData = args.userFullName;\n            }\n            scope.auth_info = $rootScope.auth_info;\n            \n        });\n\n\t\t$rootScope.$on('lw.events.logged_in_user', function () {\n\t \t\tscope.refreshAuthObj();\n        });\n\n        $rootScope.$on('lw.events.state.change_start', function () {\n\t \t\tappServices.closeAllDialog();\n        });\n\n        $rootScope.$on('lw.datastore.event.post.started', __globals.showButtonLoader);\n\n        $rootScope.$on('lw.datastore.event.fetch.started', __globals.showFormLoader);\n\n        $rootScope.$on('lw.form.event.process.started');\n\n        $rootScope.$on('lw.form.event.fetch.started', __globals.showFormLoader );\n\n        $rootScope.$on('lw.datastore.event.fetch.finished', __globals.hideFormLoader );\n\n        $rootScope.$on('lw.datastore.event.post.finished', __globals.hideButtonLoader);\n\n        $rootScope.$on('lw.form.event.process.finished', __globals.hideButtonLoader);\n\n        $rootScope.$on('lw.datastore.event.fetch.error', scope.unhandledError );\n\n        $rootScope.$on('lw.form.event.process.error', scope.unhandledError );\n\n\t\t$rootScope.$on('$stateChangeSuccess', function($stateEvent, $stateInfo) {\n\n            var scrollOffsets  = __globals.getScrollOffsets(),\n        \tyOffset = Math.round(scrollOffsets.y);\n           \t// document.body.scrollTop = document.documentElement.scrollTop = 0;\n           \t$('html, body').animate({scrollTop:0}, yOffset < 500 ? 500 : yOffset);\n        });\n\n        // Dialog Opened Event\n        $rootScope.$on('ngDialog.opened', function (e, $dialog) {\n            _.defer(function(){\n                $('.ngdialog').scrollTop(0);\n            });\n        });\n\n\t\t/**\n\t\t* Check if user logged in\n\t\t*\n\t\t* @return boolean\n\t\t*---------------------------------------------------------------- */\n\n\t\tscope.isLoggedIn = function() {\n\t\t\treturn __Auth.isLoggedIn();   // isLoggedIn\n\t\t};\n\n        /**\n        * Check if user logged in\n        *\n        * @return boolean\n        *---------------------------------------------------------------- */\n\n        scope.logoutUser = function() {\n\n           \t__Auth.registerIntended(\"dashboard\");\n\n            __DataStore.post('user.logout')\n                    .success(function(responseData) {\n\t\t\t\t\t\n                    if (responseData.reaction == 1) {\n                        // __globals.setCookie('auth_access_token', '');\n\n                        __Auth.checkOut({},function(authInfo) {\n                            $state.go('login');\n                        });\n                    }\n                    \n                });\n        };\n\n        scope.showGeneralSetting = function() {\n\n            ConfigurationDataService\n                .readConfigurationData(1)\n                .then(function(responseData) {\n\n                    var logo_background_color = responseData.data.configuration.logo_background_color;\n                  \t\n                    appServices.showDialog({\n                        'responseData' : responseData\n                    }, {\n                        templateUrl : __globals.getTemplateURL('configuration.general')\n                    }, function(promiseObj) {\n            \n                        $('#lwchangeBgHeaderColor').css('background', \"#\"+logo_background_color);\n                    });\n                });\n        };\n\n        scope.themeColors = __globals.getAppImmutables('config')['theme_colors'];\n\n        /**\n        * Set Theme color\n        *---------------------------------------------------------------- */\n        scope.setThemeColor = function(colorName) {\n            __DataStore.fetch({\n                'apiURL': 'theme_color',\n                'colorName': colorName\n            }).success(function(responseData) {\n                location.reload();\n            });\n        }\n\n        /**\n        * Show Hide Theme Color\n        *---------------------------------------------------------------- */\n        scope.showHideThemeContainer = function() {\n            if (!$('.lw-theme-color-container').hasClass('lw-theme-container-active')) {\n                $('.lw-theme-color-container').addClass('lw-theme-container-active');\n                $('.lw-switch i:first').replaceWith(\"<span>&times;</span>\");\n            } else {\n                $('.lw-theme-color-container').removeClass('lw-theme-container-active');\n                $('.lw-switch span:first').replaceWith(\"<i class='fa fa-cog'></i>\");\n            }\n        }\n\t};\n\n})();","/*!\n*  Component  : Manage Users\n*  File       : ManageUserDataService.js  \n*  Engine     : ManageUserDataService \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.ManageUserDataService', [])\n\n        /**\n          Manage User Data Service  \n        ---------------------------------------------------------------- */\n        .service('ManageUserDataService',[\n            '$q', \n            '__DataStore', \n            '__Form',\n            'appServices',\n            ManageUserDataService\n        ]);\n\n        function ManageUserDataService($q, __DataStore,__Form, appServices) {\n            \n            /*\n            Get User Info\n            -----------------------------------------------------------------*/\n            this.getUserInfo = function(userId) {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                        'apiURL' : 'manage.user.read.info',\n                        'userId' : userId\n                    }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            }; \n\n            /*\n            Get User Add Support Data\n            -----------------------------------------------------------------*/\n            this.getUserAddSupportData = function() {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch('manage.user.read.create.support_data')\n                    .success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            }; \n\n            /*\n            Get User User Permissions\n            -----------------------------------------------------------------*/\n            this.getUserPermissions = function(userId) {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.user.read.get_user_permissions',\n                    'userId' : userId\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get User User Permissions\n            -----------------------------------------------------------------*/\n            this.getUserDetailData = function(userId) {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.user.read.detail.data',\n                    'userID' : userId\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get User Edit Data\n            -----------------------------------------------------------------*/\n            this.getUserEditData = function(userId) {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.user.read.edit_suppport_data',\n                    'userId' : userId\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n        }\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Manage User\n*  File       : ManageUserEngine.js  \n*  Engine     : ManageUserEngine \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.users', [])\n\n        /**\n         * Manage Users Controller\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('ManageUsersController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            'ManageUserDataService',\n            'ConfigurationDataService',\n            function ManageUsersController($scope, __DataStore, appServices, ManageUserDataService, ConfigurationDataService) {\n\n                var dtUsersColumnsData = [\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#profileImageColumnTemplate\"\n                    },\n                    {\n                        \"name\"      : \"name\",\n                        \"template\"  : \"#userNameColumnTemplate\",\n                        \"orderable\" : true\n                    }, \n\t\t\t\t\t{\n                        \"name\"      : \"username\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : \"email\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : \"updated_at\",\n                        \"template\"  : \"#userUpdatedDateColumnTemplate\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : \"user_role\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#userActionColumnTemplate\"\n                    }\n                ],\n                dtDeletedUsersColumnsData = [\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#profileImageColumnTemplate\"\n                    },\n                    {\n                        \"name\"      : \"name\",\n                        \"template\"  : \"#userNameColumnTemplate\",\n                        \"orderable\" : true\n                    }, \n\t\t\t\t\t{\n                        \"name\"      : \"username\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : \"email\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : \"updated_at\",\n                        \"template\"  : \"#userUpdatedDateColumnTemplate\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : \"user_role\",\n                        \"orderable\" : true\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#userActionColumnTemplate\"\n                    }\n                ],\n                tabs    = {\n                    'active'    : {\n                        id      : 'activeUsersTabList',\n                        status  : 1 // Active\n                    },\n                    'inactive'    : {\n                        id      : 'inactiveUsersTabList',\n                        status  : 2 // Inactive\n                    },\n                    'deleted'    : {\n                        id      : 'deletedUsersTabList',\n                        status  : 5 // Soft Deleted\n                    }\n                },\n                currentStatus   = 1,\n                scope           = this;\n\n\n                // Manage users tab action\n                // When clicking on tab, its related tab data load on same page\n\n                $('#manageUsersTabs a').click(function (e) {\n\n                    e.preventDefault();\n\n                    var $this       = $(this),\n                        tabName     = $this.attr('aria-controls'),\n                        selectedTab = tabs[tabName];\n\n                    // Check if selected tab exist    \n                    if (!_.isEmpty(selectedTab)) {\n\n                        $(this).tab('show')\n\n                        currentStatus = selectedTab.status;\n                        scope.getUsers(selectedTab.id, selectedTab.status);\n\n                    }\n                    \n                });\n\n                /**\n                  * Get users as a datatable source  \n                  *\n                  * @param string tableID\n                  * @param number status\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                                \n                scope.getUsers   = function(tableID, status) {\n\n                    // destroy if existing instatnce available\n                    if (scope.usersListDataTable) {\n                        scope.usersListDataTable.destroy();\n                    }\n\n                    scope.usersListDataTable = __DataStore.dataTable('#'+tableID, { \n                        url         : {\n                            'apiURL'    : 'manage.user.read.datatable.list',\n                            'status'    : status\n                        }, \n                        dtOptions   : {\n                            \"searching\" : true,\n                            \"pageLength\" : 25,\n                            \"order\"     : [[ 1, \"asc\" ]]\n                        },\n                        columnsData : status == 5 ? dtDeletedUsersColumnsData : dtUsersColumnsData, \n                        scope       : $scope\n\n                    });\n\n                };\n\n                // load initial data for first tab\n                scope.getUsers('activeUsersTabList', 1);\n\n                /*\n                  Reload current datatable\n                  ------------------------------------------------------------------- */\n                \n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.usersListDataTable);\n                };\n\n                /**\n                  * Delete user \n                  *\n                  * @param number userID\n                  * @param string userName\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.delete = function(userID, userName, deleteType) {\n                    \n                    scope.deletingUserName = unescape(userName);\n\n                    _.defer(function(){\n\n                        var $lwUserDeleteConfirmTextMsg = $('#lwUserDeleteConfirmTextMsg');\n\n                        var $lwUserPerDeleteConfirmTextMsg = $('#lwUserPerDeleteConfirmTextMsg');\n\n                        if (deleteType == 1) { // Soft delete\n                            scope.deleteText = $lwUserDeleteConfirmTextMsg .attr('data-message');\n                            scope.deleteConfirmBtnText = $lwUserDeleteConfirmTextMsg .attr('data-delete-button-text');\n                            scope.successMsgText = $lwUserDeleteConfirmTextMsg .attr('success-msg');\n                        } else { // Permanent delete\n                            scope.deleteText = $lwUserPerDeleteConfirmTextMsg .attr('data-message');\n                            scope.deleteConfirmBtnText = $lwUserPerDeleteConfirmTextMsg .attr('data-delete-button-text');\n                            scope.successMsgText = $lwUserPerDeleteConfirmTextMsg.attr('success-msg');\n                        }\n\n                    });\n\n                   _.defer(function(){\n\n                        __globals.showConfirmation({\n                            html                : scope.deleteText,\n                            confirmButtonText   : scope.deleteConfirmBtnText\n                        },\n                        function() {\n\n                            __DataStore.post({\n                                'apiURL'  :'manage.user.write.delete',\n                                'userID'  : userID,\n                            })\n                            .success(function(responseData) {\n                            \n                                var message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n\n                                        error : function() {\n\n                                            __globals.showConfirmation({\n                                                title   : 'Deleted!',\n                                                text    : message,\n                                                type    : 'error'\n                                            });\n\n                                        }\n                                    },\n                                    function() {\n\n                                        __globals.showConfirmation({\n                                            title   : 'Deleted!',\n                                            text    : scope.successMsgText,\n                                            type    : 'success'\n                                        });\n                                        scope.reloadDT();   // reload datatable\n\n                                    }\n                                );    \n\n                            })\n\n                        })\n\n                   });\n\n                };\n\n                /**\n                  * Restore deleted user \n                  *\n                  * @param number userID\n                  * @param string userName\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.restore = function(userID, userName) {\n\n                    scope.restoringUserName = unescape(userName);\n\n                    _.defer(function(){\n\n                        var $lwUserRestoreConfirmTextMsg = $('#lwUserRestoreConfirmTextMsg');\n\n                        __globals.showConfirmation({\n                            text                : $lwUserRestoreConfirmTextMsg .attr('data-message'),\n                            confirmButtonText   : $lwUserRestoreConfirmTextMsg .attr('data-restore-button-text')\n                        },\n                        function() {\n\n                            __DataStore.post({\n                                'apiURL'  : 'manage.user.write.restore',\n                                'userID'  : userID,\n                            })\n                            .success(function(responseData) {\n                            \n                                var message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n\n                                        error : function() {\n                                            __globals.showConfirmation({\n                                                title   : 'Restore!',\n                                                text    : message,\n                                                type    : 'error'\n                                            });\n                                        }\n                                    },\n                                    function() {\n\n                                        __globals.showConfirmation({\n                                                title   : 'Restore!',\n                                                text    : message,\n                                                type    : 'success'\n                                            });\n                                        scope.reloadDT();   // reload datatable\n\n                                    })   \n\n                                })\n\n                            })\n\n                    });\n\n                };\n\n                /**\n                  * Change password of user by Admin \n                  *\n                  * @param number userID\n                  * @param number name\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.changePassword = function (userID, name) {\n                    \n                    // open change password dialog\n                    appServices.showDialog({\n                            userID : userID,\n                            name   : unescape(name)\n                        },\n                        {   \n                            templateUrl : __globals.getTemplateURL('user.manage.change-password'),\n                            controller: 'ManageUserChangePasswordController as userChangePassword'\n                        },\n                        function(promiseObj) {\n\n                        });\n                };\n\n                /**\n                  * Show add new user dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.showAddNewDialog = function () {\n                    \n                    appServices.showDialog(\n                    {\n                        'showRoleSelectBox' : true\n                    },\n                    {   \n                        templateUrl : __globals.getTemplateURL('user.manage.add-dialog'),\n                    },\n                    function(promiseObj) {\n\n                        // Check if category updated\n                        if (_.has(promiseObj.value, 'user_added') \n                            && promiseObj.value.user_added == true && currentStatus == 1) {\n                            scope.reloadDT();\n                        }\n\n                    });\n                };\n\n                /**\n                  * Edit User Dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.editUserDialog = function(userId, name) {\n                    appServices.showDialog(\n                    {\n                        'userId' : userId,\n                        'name'   : name\n                    },\n                    {   \n                        templateUrl : 'user.manage.edit-dialog',\n                        controller : 'EditUserDialogController as EditUserDialogCtrl',\n                        resolve : {\n                            EditUserData : function() {\n                                return ManageUserDataService\n                                        .getUserEditData(userId);\n                            }\n                        }\n                    },\n                    function(promiseObj) {\n\n                        // Check if category updated\n                        if (_.has(promiseObj.value, 'user_updated') \n                            && promiseObj.value.user_updated == true) {\n                            scope.reloadDT();\n                        }\n\n                    });\n                };\n\n                scope.showUsersConfigurationDialog = function() {\n\n                    ConfigurationDataService\n                        .readConfigurationData(5)\n                        .then( function(responseData) {\n\n                        appServices.showDialog({\n                            'responseData' : responseData\n                        }, {\n                            templateUrl : __globals.getTemplateURL('configuration.users')\n                        }, function(promiseObj) {\n\n                        });\n\n                    });\n\n                };\n\n                /**\n                  * Show User Permission Dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.usersPermissionDialog = function(userId, fullName) {\n\n                    appServices.showDialog({\n                        'userId'      : userId,\n                        'fullName'    : _.unescape(fullName)\n                    }, {\n                        templateUrl : __globals.getTemplateURL('user.manage.user-dynamic-permission'),\n                        controller : 'ManageUsersDynamicPermissionController as manageUsersDynamicPermissionCtrl',\n                        resolve : {\n                            UserPermission : function() {\n                                return ManageUserDataService.getUserPermissions(userId);\n                            }\n                        }\n                    }, function(promiseObj) {\n\n                    });\n                };\n\n                /**\n                  * Show User Permission Dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.openUserDetailsDialog = function(userId) {\n\n                    appServices.showDialog({}, {\n                        templateUrl : __globals.getTemplateURL('user.manage.user-detail-dialog'),\n                        controller : 'ManageUsersDetailController as manageUsersDetailCtrl',\n                        resolve : {\n                            UserDetailData : function() {\n                                return ManageUserDataService.getUserDetailData(userId);\n                            }\n                        }\n                    }, function(promiseObj) {\n\n                    });\n                };\n\n                /**\n                  * Show Assign location dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.showAssignLocationDialog = function(userAuthorityId, name) {\n\n                    appServices.showDialog(\n                        {\n                            userAuthorityId: userAuthorityId,\n                            name: unescape(name)\n                        }, \n                        {\n                        templateUrl : __globals.getTemplateURL('location.assign-location-dialog'),\n                        controller : 'AssignLocationController as AssignLocationCtrl',\n                        resolve : {\n                            assignLocationData : function() {\n                                return LocationDataService.getAssignLocationData(userAuthorityId);\n                            }\n                        }\n                    }, function(promiseObj) {\n\n                    });\n                };\n            }\n        ])\n\n\n        /**\n          * Add User Dialog Controller handle add new user dialog scope\n          * \n          * @inject $scope\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('AddUserDialogController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            'ManageUserDataService',\n            function ($scope,__Form, appServices, ManageUserDataService) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'add_user_form', 'userData', { \n                            secured : true,\n                            unsecuredFields : [\n                                'first_name',\n                                'last_name'\n                            ]\n                        });\n                \n                scope.showRoleSelectBox = $scope.ngDialogData.showRoleSelectBox;\n\n                // Get User add Support Data\n                ManageUserDataService\n                    .getUserAddSupportData()\n                    .then(function(responseData) {\n                        var requestData = responseData.data;\n                        scope.userRoles = requestData.userRoles;\n                    });\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    \n                    __Form.process('manage.user.write.create', scope)\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null, function() {\n                            \n                            // close dialog\n                            $scope.closeThisDialog({\n                                user_added : true,\n                                'user_data' : responseData.data.userData\n                            });\n\n                        });    \n\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n\n            } \n        ])\n\n         /**\n          * ManageUserChangePasswordController handle change password by admin\n          * \n          * @inject $scope\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('ManageUserChangePasswordController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            function ManageUserChangePasswordController($scope,__Form, appServices) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'change_password_form', 'changePasswordData', {\n                            secured : true\n                        });\n                \n                scope.ngDialogData = $scope.ngDialogData;\n\n                scope.title = unescape(scope.ngDialogData.name);\n\n                // get id of user\n                scope.userID = scope.ngDialogData.userID;\n\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    \n                    __Form.process({\n                        'apiURL'    : 'manage.user.write.change_password.process',\n                        'userID'    : scope.userID\n                    }, scope)\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null, function() {\n                            \n                            // close dialog\n                            $scope.closeThisDialog();\n\n                        });    \n\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n            /**\n         * User Detail Dialog Controller\n         *\n         * inject object $scope\n         * inject object __DataStore\n         * inject object __Form\n         * inject object $stateParams\n         *\n         * @return  void\n         *---------------------------------------------------------------- */\n\n        .controller('ManageUsersDetailController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'UserDetailData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, UserDetailData) {\n\n                var scope = this,\n                    requestData = UserDetailData;\n\n                    scope.userData = requestData.userData;\n                  \n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n          * Manage User Dynamic Permissions\n          *\n          * @inject $scope\n          * @inject __Form\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('ManageUsersDynamicPermissionController',   [\n            '$scope',\n            '__Form',\n            '__DataStore',\n            'appServices',\n            'UserPermission',\n            function ManageUsersDynamicPermissionController($scope, __Form, __DataStore, appServices, UserPermission) {\n\n                var scope   = this;\n                \n                scope  = __Form.setup(scope, 'user_dynamic_access', 'accessData', {\n                    secured : true,\n                    unsecuredFields : []\n                });\n                \n                scope.ngDialogData  = $scope.ngDialogData;\n                scope.userId  = scope.ngDialogData.userId;\n                scope.fullName = scope.ngDialogData.fullName;\n                scope.requestData   = UserPermission;\n                scope.permissions = scope.requestData.permissions;\n\n             \tscope.accessData.allow_permissions = scope.requestData.allow_permissions;\n\t\t\t\tscope.accessData.deny_permissions = scope.requestData.deny_permissions;\n\t\t\t\tscope.accessData.inherit_permissions = scope.requestData.inherit_permissions;\n\n                scope.disablePermissions = function(eachPermission, permissionID) {\n\n                    _.map(eachPermission.children, function(key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function(text) {\n                                $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n\n                }\n\n\t\t\t\tscope.checkedPermission = {};\n\n\t\t\t\t_.map(scope.accessData.allow_permissions, function(permission) {\n\t\t\t\t\tscope.checkedPermission[permission] = \"2\";\n\t\t\t\t});\n\n\t\t\t\t_.map(scope.accessData.deny_permissions, function(permission) {\n\t\t\t\t\tscope.checkedPermission[permission] = \"3\";\n\n\n                    _.map(scope.permissions, function(eachPermission) {\n\n                        var pluckedIDs = _.get(eachPermission.children, 'id');\n                        \n                        if (_.includes(pluckedIDs, permission)) {\n                            scope.disablePermissions(eachPermission, permission)\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n                             \n                            _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                var pluckedIDs = _.get(groupchild.children, 'id');\n                        \n                                if (_.includes(pluckedIDs, permission)) {\n                                    scope.disablePermissions(groupchild, permission)\n                                }\n                            });\n                        }\n                    });\n\n\t\t\t\t});\n\n\t\t\t\t_.map(scope.accessData.inherit_permissions, function(permission) {\n\t\t\t\t\tscope.checkedPermission[permission] = \"1\";\n\n                    _.map(scope.permissions, function(eachPermission) {\n\n                        var pluckedIDs = _.map(eachPermission.children, 'id');\n                         \n                        if (_.includes(pluckedIDs, permission) && eachPermission.children[0].inheritStatus == false && eachPermission.children[0].result == \"1\") {\n                            scope.disablePermissions(eachPermission, permission);\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n                             \n                            _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                var pluckedIDs = _.map(groupchild.children, 'id');\n                        \n                                if (_.includes(pluckedIDs, permission) && groupchild.children[0].inheritStatus == false && groupchild.children[0].result == \"1\") {\n                                    scope.disablePermissions(groupchild, permission);\n                                }\n\n                            });\n                        }\n                    });\n\t\t\t\t});\n                   \n                //for updating permissions\n                scope.checkPermission = function(childId, status) {\n \t\t\t\t\t\n \t\t\t\t\tif (!_.isString(status)) {\n \t\t\t\t\t\tstatus = status.toString();\n \t\t\t\t\t}\n\n \t\t\t\t\tscope.checkedPermission[childId] = status;\n \t\t\t\t\t\n                 \tif (status == \"2\") {\n                \t\tif(!_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n                \t} else if (status == \"3\")  {\n\n\t                   \tif(!_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t} else {\n                \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n\t\t\t\t\t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t}\n\n                \t_.map(scope.permissions, function(permission) {\n\n                        var pluckedIDs = _.map(permission.children, 'id'), \n                        keyPermissions = [];\n                        \n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n                            \n                            _.map(permission.children, function(key) {\n                                if (_.includes(key.dependencies, childId) && status == \"3\") {\n                                    \n                                    $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                }  else if (_.includes(key.dependencies, childId) && status == \"1\" && permission.children[0].result && permission.children[0].inheritStatus == false) {\n               \n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                        }\n                                else {\n                                    $('input[name=\"'+key.id+'\"]').attr('disabled', false);\n                                }\n\n                            });\n\n                        }\n                        \n\t\t\t\t\t\tif (_.has(permission, 'children_permission_group')) {\n \t\t\t \t\t \t\t_.map(permission.children_permission_group, function(groupchild) {\n\n                                var pluckedGroupChildIDs = _.map(groupchild.children, 'id'),\n                                keyPermissionsGroup = [];\n\n                                //for disabling options if read option  in denied\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n                            \n                                    _.map(groupchild.children, function(groupchildkey) {\n                                        if (_.includes(groupchildkey.dependencies, childId) && status == \"3\") {\n                                            $('input[name=\"'+groupchildkey.id+'\"]').attr('disabled', true);\n \n                                        } else if (_.includes(groupchildkey.dependencies, childId) && status == \"1\" && groupchild.children[0].result && groupchild.children[0].inheritStatus == false) {\n               \n                                            $('input[name=\"'+groupchildkey.id+'\"]').attr('disabled', true);\n\n                                        }  else {\n                                            $('input[name=\"'+groupchildkey.id+'\"]').attr('disabled', false);\n                                        }\n                                        \n                                         \n                                    });\n\n                                }\n\t\t\t\t\t\t\t})\n\t\t\t\t\t \t}\n\t\t\t\t\t})\n              \t}\n              \t\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    // scope.preparePermissions();\n                    __Form.process({\n                        'apiURL' : 'manage.user.write.user_dynamic_permission',\n                        'userId' : scope.userId\n                    }, scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog();\n                        });    \n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n                        \n            }\n        ])\n\n        /**\n          * Edit User Dialog Controller\n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('EditUserDialogController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'EditUserData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, EditUserData) {\n\n                var scope = this,\n                    requestData = EditUserData,\n                    ngDialogData = $scope.ngDialogData;\n\n                scope.userRoles = requestData.userRoles;\n                scope  = __Form.setup(scope, 'user_edit_form', 'userData');\n                scope = __Form.updateModel(scope, requestData.userUpdateData);\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    \n                    __Form.process({\n                        'apiURL' : 'manage.user.write.update_process',\n                        'userId' : ngDialogData.userId\n                    }, scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog({'user_updated' : true});\n                        });    \n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n})(window, window.angular);","/*!\n*  Component  : Users\n*  File       : UserDataService.js  \n*  Engine     : UserDataService \n----------------------------------------------------------------------------- */\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.UserDataService', [])\n\n        /**\n          User Data Service  \n        ---------------------------------------------------------------- */\n        .service('UserDataService',[\n            '$q', \n            '__DataStore', \n            '__Form',\n            'appServices',\n            UserDataService\n        ]);\n\n        function UserDataService($q, __DataStore,__Form, appServices) {\n\n            /*\n            Get Login attempts \n            -----------------------------------------------------------------*/\n            this.getLoginAttempts = function() {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __Form.fetch('user.login.attempts')\n                    .success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get Countries List \n            -----------------------------------------------------------------*/\n            this.getCountries = function() {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch('user.get.country_list')\n                    .success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n        }\n    ;\n})(window, window.angular);","/*!\n*  Component  : User\n*  File       : UserEngine.js  \n*  Engine     : UserEngine \n----------------------------------------------------------------------------- */\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('Manage-app.users', [])\n\n        /**\n          * UserLoginController - login a user in application\n          *\n          * @inject __Form\n          * @inject __Auth\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserLoginController',   [\n            '__Form', \n            '__Auth', \n            'appServices',\n            '__Utils',\n            'UserDataService',\n            '$state',\n\t\t\t'$rootScope',\n            function (__Form, __Auth, appServices, __Utils, UserDataService, $state, $rootScope) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'form_user_login', 'loginData', {\n                    secured : true\n                });\n\n                scope.show_captcha      = false;\n                scope.request_completed = false;\n\n                /**\n                  * Get login attempts for this client ip\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                UserDataService.getLoginAttempts()\n                    .then(function(responseData) {\n                        scope.show_captcha      = responseData.data.show_captcha;\n                        scope.site_key      = responseData.data.site_key;\n                        scope.request_completed = true;\n                });\n\n\t\t\t\tscope.redirectToIntended = function() {\n\n\t\t\t\t\tif( __globals.intended && __globals.intended.name && __globals.intended.params) {\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn $state.go(__globals.intended.name, __globals.intended.params);       \n             \t\n\t\t\t\t\t} else if( __globals.intended && __globals.intended.name) {\n\n\t\t\t\t\t\treturn $state.go(__globals.intended.name);      \n\t\t\t\t\t}\n\n\t\t\t\t\treturn $state.go('project');      \n\n                };\n\n                /**\n                  * Fetch captch url\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function() {\n                    return __Utils.apiURL('security.captcha')+'?ver='+Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function() {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL  = scope.getCaptchaURL();\n\t\t\t\n                /**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\t\t\t\t\n                scope.submit = function() {\n\n                    scope.isInActive     = false;\n                    scope.accountDeleted = false;\n\n                    __Form.process('user.login.process', scope).success(function(responseData) {\n\n                        var requestData = responseData.data;\n\n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                    scope.show_captcha = requestData.show_captcha;\n\n                                    // reset password field\n                                    scope[scope.ngFormModelName].password   = \"\";\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope[scope.ngFormModelName].confirmation_code   = \"\";\n                                        scope.refreshCaptcha();\n                                    }\n\n                                },\n                                otherError : function(reactionCode) {\n\n                                    scope.isInActive         = requestData.isInActive;\n                                    scope.accountDeleted     = requestData.accountDeleted;\n\n                                    // If reaction code is Server Side Validation Error Then \n                                    // Unset the form fields\n                                    if (reactionCode == 3) {\n\n                                        // Check if show captcha exist then refresh captcha\n                                        if (scope.show_captcha) {\n                                            scope.refreshCaptcha();\n                                        }\n\n                                    }\n\n                                    // If reaction code 10 is already authenticate.\n                                    if (reactionCode == 10) {\n\n                                        // Check if show captcha exist then refresh captcha\n                                        scope.redirectToIntended();\n                                       //__globals.redirectBrowser(__Utils.apiURL('dashboard'));\n\n                                    }\n\n                                }\n                            },\n                            function() {\n \n                                __Auth.checkIn(requestData.auth_info, function() {\n                                 \n                                // __globals.setCookie('auth_access_token', requestData.access_token);\n                  \n                                    if(requestData.availableRoutes) {\n                                        __globals.appImmutable('availableRoutes', \n                                            requestData.availableRoutes);\n                                    }\n\n\t\t\t\t\t\t\t\t\tif(requestData.ckeditor) {\n\t\t\t\t\t\t\t\t\t\t__globals.appImmutable('ckeditor', requestData.ckeditor);\n\t\t\t\t\t\t\t\t\t}\n\n\n                                    if (requestData.intendedUrl) {\n\n                                        __globals.redirectBrowser(requestData.intendedUrl);\n\n                                    } else {\n\n\t\t\t\t\t\t\t\t\t\t$rootScope.$emit('lw.events.logged_in_user', {data : true});\n\n                                         scope.redirectToIntended();\n\n                                    }\n\n                                });\n                            });    \n\n                    });\n\n                };\n\n            }\n\n        ])\n\n        \n        /**\n          * UserLogoutController for login logout\n          *\n          * @inject __DataStore\n          * @inject __Auth\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('UserLogoutController',   [\n            '__DataStore', \n            '__Auth', \n            'appServices', \n            function UserLogoutController(__DataStore, __Auth, appServices) {\n\n                var scope   = this;\n\n                __DataStore.post('user.logout').success(function(responseData) {\n\n                    appServices.processResponse(responseData, function(reactionCode) {\n\n                        // set user auth information\n                        __Auth.checkIn(responseData.data.auth_info);  \n\n                    });\n\n                });\n\n            }\n        ])\n\n        /**\n          * UserForgotPasswordController - request to send password reminder\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserForgotPasswordController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n            '$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope   = this;\n\n\n                scope = __Form.setup(scope, 'user_forgot_password_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Submit form\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.forgot_password.process', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            \n                           $state.go('forgot_password_sucess');\n                           \n                        });    \n\n                    });\n\n                };\n\n            }\n\n        ])\n\n\t\t/**\n          * UserResetPasswordController for reset user password\n          *\n          * @inject __Form\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserResetPasswordController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n\t\t\t'$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_reset_password_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Submit reset password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                \n                scope.submit = function() {\n\n                    __Form.process({\n                        'apiURL'        : 'user.reset_password.process',\n                        'reminderToken' : $state.params.reminderToken\n                    }, scope)\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null,\n                            function(reactionCode) {\n                            $state.go('login');\n                        });    \n\n                    });\n\n                };\n\n            }\n        ])\n})(window, window.angular);","/*!\n*  Component  : Configuration\n*  File       : ConfigurationDataService.js  \n*  Engine     : ConfigurationDataService \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.ConfigurationDataService', [])\n        .service('ConfigurationDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            ConfigurationDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function ConfigurationDataService($q, __DataStore, appServices) {\n\n            /*\n            Get the data of configuration\n            -----------------------------------------------------------------*/\n\n            this.readConfigurationData = function(formType) {\n\n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                        'apiURL'   :'manage.configuration.get.support.data',\n                        'formType' : formType // different form type like 1, 2,3,4 etc\n                    }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n        };\n\n    \n})(window, window.angular);\n","\n/*!\n*  Component  : Configuration\n*  File       : ConfigurationEngine.js\n*  Engine     : ConfigurationEngine\n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.configuration', [])\n\n        /**\n         * GeneralDialogController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         * @inject __Form\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('GeneralController', [\n            '$scope',\n            '__Form',\n            '$state',\n            'appServices',\n            'lwFileUploader',\n            '__Utils',\n            '$rootScope',\n            'getGeneralData',\n        function GeneralController(\n            $scope, __Form, $state, appServices, lwFileUploader, __Utils, $rootScope, getGeneralData\n        ) {\n\n        var scope  = this;\n           scope.default_header_background_color = getGeneralData.data.configuration.default_header_background_color;\n            scope.default_header_text_link_color = getGeneralData.data.configuration.default_header_text_link_color;\n            scope.themeColors = getGeneralData.data.configuration.theme_colors;\n            \n            scope  = __Form.setup(scope, 'general_edit', 'editData', {\n            \tsecured : true,\n                modelUpdateWatcher:true,\n                unsecuredFields : ['logoURL', 'faviconURL', 'name']\n            });\n\n            scope.pageStatus = false;\n\n            scope.timezone_select_config = __globals.getSelectizeOptions({\n                valueField  : 'value',\n                labelField  : 'text',\n                searchField : [ 'text' ]\n            });\n\n            scope.home_page_select_config = __globals.getSelectizeOptions({\n                valueField  : 'id'\n            });\n\n            scope.selectSiteColor = function(themeColor) {\n                scope.editData.header_background_color = themeColor.background;\n                scope.editData.header_text_link_color = themeColor.text;\n            }\n\n            scope.checkLogo = function(from) {\n                var isSame = false;\n\n                if (scope.editData.invoice_logo_image == scope.editData.logo_image) {\n                    isSame = true;\n                }\n\n                if (isSame) {\n                    if (from == 1) { // Logo\n                        scope.editData.invoice_logo_image = '';\n                    } else if (from == 2) { // Invoice Logo\n                        scope.editData.logo_image = '';\n                    }\n                }\n            };\n\n            /**\n              * Clear Color \n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.clearColor = function() {\n            \t// var logo_background_color = ngDialogData.responseData.data.configuration.logo_background_color;\n\t\t\t    scope.editData.header_background_color = scope.default_header_background_color;\n\t\t\t\t\n\t\t\t}\n\n\t\t\t/**\n              * Clear Color \n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.clearPrimaryColor = function() {\n\t\t\t    scope.editData.header_text_link_color = scope.default_header_text_link_color;\n\t\t\t}\n\t\t\t\n            /**\n              * Fetch support data\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            var requestData         = getGeneralData.data;\n                scope.timezoneData  = requestData.configuration.timezone_list;\n                scope.homePageData  = __globals.generateKeyValueItems(requestData.configuration.home_page_list);\n\t\t\t\t\n            \tscope.languages   = requestData.configuration.locale_list;\n                var configuration = requestData.configuration;\n\t\t\t\t\n                __Form.updateModel(scope, configuration);\n\n                scope.pageStatus = true;\n\n                scope.imagesSelectConfig  = __globals.getSelectizeOptions({\n                    valueField  : 'name',\n                    labelField  : 'name',\n                    render      : {\n                        item: function(item, escape) {\n                            return  __Utils.template('#imageListItemTemplate',\n                            item\n                            );\n                        },\n                        option: function(item, escape) {\n                            return  __Utils.template('#imageListOptionTemplate',\n                            item\n                            );\n                        }\n                    },\n                    searchField : ['name']\n                });\n\n\n            /**\n              * Retrieve files required for account logo\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.retrieveSpecificFiles  =  function() {\n\n                lwFileUploader.getTempUploadedFiles(scope, {\n                    'url' : __Utils.apiURL('media.upload.read_logo')\n                }, function(uploadedFile) {\n                    scope.logoFiles       = uploadedFile;\n                    scope.logoFilesCount = uploadedFile.length;\n                });\n\n            };\n            scope.retrieveSpecificFiles();\n\n            scope.retrieveFaviconFiles = function() {\n                lwFileUploader.getTempUploadedFiles(scope, {\n                    'url' : __Utils.apiURL('media.upload.read_favicon')\n                }, function(uploadedFile) {\n                    scope.faviconFiles      = uploadedFile;\n                    scope.faviconFilesCount = uploadedFile.length;\n                });\n            };\n\n            scope.retrieveFaviconFiles();\n\n            $rootScope.$on('lw-loader-event-start', function (event, data) {\n                $scope.loading = true; \n\t\t\t\t$(\"#lwFileupload\").attr(\"disabled\", true);\n            });\n            \n            $rootScope.$on('lw-loader-event-stop', function (event, data) {\n                $scope.loading = false;\n\t\t\t\t$(\"#lwFileupload\").attr(\"disabled\", false); \n            });\n\n            // uploader file instance\n            $scope.upload = function() {\n\t\t\t\t\n                lwFileUploader.upload({\n                        'url' : __Utils.apiURL('media.upload.write.logo')\n                    }, function(response) {\n\n                    scope.retrieveSpecificFiles();\n                    scope.retrieveFaviconFiles();\n\n                });\n            };\n\n            /**\n              * Show uploaded media files\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            $scope.showUploadedMediaDialog = function() {\n\n                lwFileUploader.openDialog(scope, {\n                    'url' : __Utils.apiURL('media.upload.read_logo')\n                },\n                function(promiseObject) {\n                    scope.retrieveSpecificFiles();\n                    scope.retrieveFaviconFiles();\n                });\n\n            };\n\n            /**\n              * update blog data\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n\n                __Form.process({\n                    'apiURL'    : 'manage.configuration.process',\n                    'formType'  : 1\n                }, scope)\n                    .success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n\n                        var requestData = responseData.data;                        \n                        if (requestData.showRealodButton == true) {\n                            __globals.showConfirmation({\n                                title               : responseData.data.message,\n                                text                : responseData.data.textMessage,\n                                type                : \"success\",\n                                confirmButtonClass  : \"btn-success\",\n                               confirmButtonText   : $(\"#lwReloadBtnText\").attr('data-message'),\n                                confirmButtonColor :  \"#337ab7\",\n                            }, function() {\n                                location.reload();\n                            });\n                        }\n                    });\n                });\n            };\n               \n            /**\n              * Close dialog\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\t\t\tvar logo_background_color = getGeneralData.data.configuration.logo_background_color;\n\t\t\t\t\n            scope.closeDialog = function() {\n\t\t\t\t\n\t\t\t\t// $('#lwchangeHeaderColor').css('background', \"#\"+logo_background_color);\n                $scope.closeThisDialog();\n            };\n        }\n        ])\n\n        /**\n         * CurrencyConfigurationController for manage currency of store\n         *\n         * @inject $scope\n         * @inject __Form\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('CurrencyConfigurationController', [\n            '$scope',\n            '__Form',\n            'appServices',\n            'getCurrencyData',\n        function CurrencyConfigurationController( $scope, __Form, appServices, getCurrencyData) {\n\n            var scope = this,\n            ngDialogData = $scope.ngDialogData;\n\n            scope.isZeroDecimalCurrency = false;\n            \n            /**\n              * Generate key value\n              *\n              * @param bool responseKeyValue\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.generateCurrenciesArray = function(currencies, responseKeyValue) {\n\n                if (!responseKeyValue) {\n                    return currencies;\n                }\n\n                var currenciesArray = [];\n\n                _.forEach(currencies, function(value, key) {\n\n                    currenciesArray.push({\n                        'currency_code'     : key,\n                        'currency_name'     : value.name\n                    });\n\n                });\n\n                var $lwCurrencySettingTxtMsg = $('#lwCurrencySettingTxtMsg');\n\n                currenciesArray.push({\n                    'currency_code'  : 'other',\n                    'currency_name'  : $lwCurrencySettingTxtMsg.attr('other-text')\n                });\n\n                return currenciesArray;\n\n            };\n\n            /**\n              *  Check the the currency match with zero decimal\n              *\n              * @param array zeroDecimalCurrecies\n              * @param string selectedCurrencyValue\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.checkIsZeroDecimalCurrency = function(zeroDecimalCurrecies, selectedCurrencyValue) {\n\n                var isMatch = _.filter(zeroDecimalCurrecies, function(value, key) {\n\n                        return  (key === selectedCurrencyValue);\n                    });\n\n                scope.isZeroDecimalCurrency = Boolean(isMatch.length);\n\n            };\n\n            /**\n              * Check if current currency is Paypal supported or not\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.checkIsPaypalSupported = function (currencyValue) {\n\n                var isPaypalSupported = _.filter(scope.options, function(value, key) {\n\n                    return  (key == currencyValue);\n                });\n\n                scope.isPaypalSupport = Boolean(isPaypalSupported.length);\n            };\n\n            /**\n              * format currency symbol and currency value\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.formatCurrency = function (currencySymbol, currency) {\n\n                _.defer(function() {\n\n                    var $lwCurrencyFormat = $('#lwCurrencyFormat');\n\n                    var string = $lwCurrencyFormat.attr('data-format');\n\n                    scope.currency_format_preview  =  string.split('{__currencySymbol__}').join(currencySymbol)\n                                                            .split('{__amount__}').join(100)\n                                                            .split('{__currencyCode__}').join(currency);\n                });\n            };\n\n            scope.pageStatus = false;\n\n            scope  = __Form.setup(scope, 'edit_currency_configuration', 'editData', {\n                secured : true,\n                unsecuredFields : [\n                    'currency_symbol',\n                    'currency_format'\n                ]\n            });\n\n            scope.currencies_select_config = __globals.getSelectizeOptions({\n                valueField  : 'currency_code',\n                labelField  : 'currency_name',\n                searchField : [ 'currency_code', 'currency_name' ]\n            });\n\n            scope.multi_currencies_select_config = __globals.getSelectizeOptions({\n                valueField  : 'currency_code',\n                labelField  : 'currency_name',\n                searchField : [ 'currency_code', 'currency_name' ],\n                plugins     : ['remove_button'],\n                maxItems    : 1000,\n                delimiter   : ',',\n                persist     : false\n            });\n\n            scope.is_support_paypal = true;\n\n\n            var requestData     = getCurrencyData.data,\n                currenciesData  = requestData.configuration.currencies;\n\n            scope.options     = currenciesData.options;\n            scope.currencies  = currenciesData.details;\n            scope.zeroDecimal = currenciesData.zero_decimal;\n            /*scope.currencies_options\n                    = scope.generateCurrenciesArray(currenciesData.details, true);*/\n\n            _.defer(function() {\n                scope.currencies_options\n                    = scope.generateCurrenciesArray(currenciesData.details, true);\n            });\n\n            scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, requestData.configuration.currency_value);\n\n            scope.checkIsPaypalSupported(requestData.configuration.currency);\n\n            scope.default_currency_format = requestData.configuration.default_currency_format;\n\n            scope.placeholders = requestData.placeholders;\n            scope = __Form.updateModel(scope, requestData.configuration);\n\n            _.forEach(scope.currencies, function(currencyObj, key) {\n\n                if (key == scope.editData.currency_value) {\n                    scope.currencySymbol = currencyObj.symbol;\n                }\n            });\n\n            if (requestData.configuration.currency == 'other') {\n                scope.currencySymbol = requestData.configuration.currency_symbol;\n            }\n\n            scope.formatCurrency(scope.currencySymbol, scope.editData.currency_value);\n\n\n            scope.pageStatus = true;\n\n\n            /**\n              * Use default format for currency\n              *\n              * @param string defaultCurrencyFormat\n              *\n              * @return string\n              *---------------------------------------------------------------- */\n            scope.useDefaultFormat = function(defaultCurrencyFormat, currency_symbol, currency_value) {\n\n                scope.editData.currency_format = defaultCurrencyFormat;\n\n                var string = scope.editData.currency_format;\n\n                scope.currency_format_preview  =  string.split('{__currencySymbol__}').join(currency_symbol)\n                                                    .split('{__amount__}').join(100)\n                                                    .split('{__currencyCode__}').join(currency_value);\n            };\n\n\n            /**\n              * Use default format for currency\n              *\n              * @param string defaultCurrencyFormat\n              *\n              * @return string\n              *---------------------------------------------------------------- */\n            scope.updateCurrencyPreview = function(currency_symbol, currency_value) {\n\n                if (_.isUndefined(currency_symbol)) {\n                    currency_symbol = '';\n                }\n\n                if (_.isUndefined(currency_value)) {\n                    currency_value = '';\n                }\n\n                var $lwCurrencyFormat = $('#lwCurrencyFormat');\n\n                var string = $lwCurrencyFormat.attr('data-format');\n\n                scope.currency_format_preview  =  string.split('{__currencySymbol__}').join(currency_symbol)\n                                                        .split('{__amount__}').join(100)\n                                                        .split('{__currencyCode__}').join(currency_value);\n\n            };\n\n            /**\n              * Submit currency Data\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n\n                __Form.process({\n                    'apiURL'    : 'manage.configuration.process',\n                    'formType'  : 2 // currency\n                }, scope)\n                    .success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n\n                        var requestData = responseData.data;\n                        \n                        if (requestData.showRealodButton == true) {\n\n                            __globals.showConfirmation({\n                                title               : responseData.data.message,\n                                text                : responseData.data.textMessage,\n                                type                : \"success\",\n                                showCancelButton    : true,\n                                confirmButtonClass  : \"btn-success\",\n                                confirmButtonText   : $(\"#lwReloadBtnText\").attr('data-message'),\n                                confirmButtonColor :  \"#337ab7\"\n                            }, function() {\n\n                               location.reload();\n\n                            });\n                        }\n                    });\n\n                });\n            };\n\n\n            /**\n              * currency change\n              *\n              * @param selectedCurrency\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.currencyChange = function(selectedCurrency) {\n\n                scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, selectedCurrency);\n\n                if (!_.isEmpty(selectedCurrency) && selectedCurrency != 'other') {\n\n                    _.forEach(scope.currencies, function(currencyObj, key) {\n\n                        if (key == selectedCurrency) {\n                            scope.editData.currency_value   = selectedCurrency;\n                            scope.editData.currency_symbol  = currencyObj.ASCII;\n                            scope.currencySymbol            = currencyObj.symbol;\n                        }\n\n                    });\n\n                    scope.is_support_paypal = true;\n\n                } else {\n\n                    scope.editData.currency_value   = '';\n                    scope.editData.currency_symbol  = '';\n\n                }\n\n                scope.updateCurrencyPreview(scope.currencySymbol, scope.editData.currency_value);\n\n                scope.checkIsPaypalSupported(scope.editData.currency_value);\n\n            };\n\n            /**\n              * currency value change\n              *\n              * @param currencyValue\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.currencyValueChange = function(currencyValue) {\n\n                scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, currencyValue);\n\n                if (!_.isEmpty(currencyValue) && currencyValue != 'other') {\n\n                    var currency = {};\n                    _.forEach(scope.currencies, function(currencyObj, key) {\n\n                        if (key == currencyValue) {\n                            currency = currencyObj;\n                        }\n\n                    });\n\n                    if (_.isEmpty(currency)) {\n                        //scope.is_support_paypal = false;\n                        scope.editData.currency  = 'other';\n                    } else {\n                        //scope.is_support_paypal     = true;\n                        scope.editData.currency     = currencyValue;\n                        scope.editData.currency_symbol  = currency.ASCII;\n                        scope.currencySymbol           = currency.symbol;\n                    }\n\n                } else if (!_.isEmpty(currencyValue)) {\n\n                    //scope.is_support_paypal     = false;\n                    scope.editData.currency     = 'other';\n\n                } else {\n\n                    //scope.is_support_paypal  = true;\n                    scope.editData.currency  = '';\n\n                }\n\n                scope.checkIsPaypalSupported(currencyValue);\n\n                if (_.isUndefined(scope.editData.currency_value)) {\n                    scope.currencySymbol = '';\n                }\n\n                scope.updateCurrencyPreview(scope.currencySymbol, scope.editData.currency_value);\n            };\n\n            /**\n              * Close dialog\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n                $scope.closeThisDialog(scope.currencySymbol, scope.editData.currency);\n            };\n        }\n        ])\n        ;\n\n})(window, window.angular);","/*!\n*  Component  : RolePermission\n*  File       : RolePermissionDataServices.js  \n*  Engine     : RolePermissionServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.RolePermissionDataServices', [])\n        .service('RolePermissionDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            RolePermissionDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function RolePermissionDataService($q, __DataStore, appServices) {\n\n            /*\n            Get Permissions\n            -----------------------------------------------------------------*/\n            this.getPermissions = function(roleId) {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.user.role_permission.read',\n                    'roleId' : roleId\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get Add Role Support Data\n            -----------------------------------------------------------------*/\n            this.getAddSupportData = function() {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch('manage.user.role_permission.read.add_support_data')\n                    .success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get add support Data \n            -----------------------------------------------------------------*/\n            this.getAllPermissionsById = function(roleId) {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                        'apiURL' : 'manage.user.role_permission.read.using_id',\n                        'roleId' : roleId\n                    }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n        };\n\n})(window, window.angular);\n","/*!\n*  Component  : RolePermission\n*  File       : RolePermission.js\n*  Engine     : RolePermission\n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.RolePermissionEngine', [])\n\n        /**\n        * Role Permission List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object RolePermissionDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('RolePermissionListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'RolePermissionDataService',\n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope, RolePermissionDataService) {\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"title\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#rolePermissionActionColumnTemplate\"\n                    }\n                ],\n                scope   = this;\n\n                /**\n                * Get general user test as a datatable source object\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.rolePermissionDataTable = __DataStore.dataTable('#lwrolePermissionList', {\n                    url         : 'manage.user.role_permission.read.list',\n                    dtOptions   : {\n                        \"searching\": true,\n                        \"pageLength\" : 25\n                    },\n                    columnsData : dtColumnsData, \n                    scope       : $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.rolePermissionDataTable);\n                };\n\n               /**\n                * rolePermission delete\n                *\n                * inject rolePermissionIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function(rolePermissionIdOrUid, name) {\n\n                    var $lwRolePermissionDeleteTextMsg = $('#lwRolePermissionDeleteTextMsg');\n\n                    __globals.showConfirmation({\n                        html : __globals.getReplacedString($lwRolePermissionDeleteTextMsg,\n                                    '__name__',\n                                    _.unescape(name)\n                                ),\n                        confirmButtonText : $lwRolePermissionDeleteTextMsg.attr('data-delete-button-text')\n                    }, function() {\n\n                        __DataStore.post({\n                            'apiURL' : 'manage.user.role_permission.write.delete',\n                            'rolePermissionIdOrUid' : rolePermissionIdOrUid\n                        }).success(function(responseData) {\n\n                            var message = responseData.data.message;\n\n                            appServices.processResponse(responseData, {\n\n                                error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwRolePermissionDeleteTextMsg .attr('data-error-text'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n                            }\n\n                            }, function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwRolePermissionDeleteTextMsg .attr('data-success-text'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.reloadDT();\n                            });\n\n                        });\n\n                    });\n                };\n\n                /**\n                * Show add new role dialog\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n                scope.showAddNewDialog = function() {\n\n                    appServices.showDialog({},\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                                'user.role-permission.add-dialog'\n                            ),\n                        controller: 'AddRoleController as addRoleCtrl',\n                        resolve : {\n                            addSupportData : function() {\n                                return RolePermissionDataService\n                                        .getAddSupportData();\n                            }\n                        }\n                    },\n                    function(promiseObj) {\n                        if (_.has(promiseObj.value, 'role_Added') \n                            && (promiseObj.value.role_Added === true)) {\n                            scope.reloadDT();\n                        }\n                    });\n                };\n\n              /**\n                * Role Permission Dialog\n                *\n                * inject roleId\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n                scope.rolePermissionDialog = function(roleId, title) {\n\n                    appServices.showDialog({\n                        'roleId' : roleId,\n                        'title'  : _.unescape(title)\n                    },\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                                'user.role-permission.dynamic-role-permissions'\n                            ),\n                        controller: 'DynamicRolePermissionController as DynamicRolePermissionCtrl',\n                        resolve : {\n                            permissionData : function() {\n                                return RolePermissionDataService\n                                        .getPermissions(roleId);\n                            }\n                        }\n                    },\n                    function(promiseObj) {\n\n                    });\n                };\n        }\n        ])\n        // Role Permission List Controller ends here\n\n        /**\n          * Dynamic Role Permission Controller\n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('DynamicRolePermissionController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'permissionData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, permissionData) {\n                var scope    = this,\n                    ngDialog = $scope.ngDialogData,\n                    roleId   = ngDialog.roleId;\n\n                scope  = __Form.setup(scope, 'user_role_dynamic_access', 'accessData', {\n                    secured : true,\n                    unsecuredFields : []\n                });\n\n                scope.title = ngDialog.title;\n                scope.permissions = permissionData.permissions;\n\n\t\t\t \tscope.accessData.allow_permissions = permissionData.allow_permissions;\n\t\t\t\tscope.accessData.deny_permissions = permissionData.deny_permissions;\n \t\t\t\tscope.checkedPermission = {};\n\n\t\t\t\tscope.disablePermissions = function(eachPermission, permissionID) {\n\n                    _.map(eachPermission.children, function(key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function(text) {\n                                $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n\n                }\n\n\t\t\t\t_.map(scope.accessData.allow_permissions, function(permission) {\n\t\t\t\t \tscope.checkedPermission[permission] = \"2\";\n\t\t\t\t})\n\t\t\t\t_.map(scope.accessData.deny_permissions, function(permission) {\n\t\t\t\t \tscope.checkedPermission[permission] = \"3\";\n\n\t\t\t\t \t_.map(scope.permissions, function(eachPermission) {\n\n                        var pluckedIDs = _.map(eachPermission.children, 'id');\n\n                        if (_.includes(pluckedIDs, permission)) {\n                            scope.disablePermissions(eachPermission, permission)\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n\n                            _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                var pluckedIDs = _.map(groupchild.children, 'id');\n\n                                if (_.includes(pluckedIDs, permission)) {\n                                    scope.disablePermissions(groupchild, permission)\n                                }\n                            });\n                        }\n                    });\n\t\t\t\t})\n\n                scope = __Form.updateModel(scope, scope.accessData);\n\n \t\t\t\t//for updating permissions\n                scope.checkPermission = function(childId, status) {\n\n \t\t\t\t\tif (!_.isString(status)) {\n \t\t\t\t\t\tstatus = status.toString();\n \t\t\t\t\t}\n\n \t\t\t\t\tscope.checkedPermission[childId] = status;\n\n                 \tif (status == \"2\") {\n                \t\tif(!_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n                \t} else if (status == \"3\")  {\n\n\t                   \tif(!_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t} else {\n\n                \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n                 \t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t}\n\n                \t_.map(scope.permissions, function(permission) {\n\n                        var pluckedIDs = _.map(permission.children, 'id'),\n                        keyPermissions = [];\n\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n\n                            _.map(permission.children, function(key) {\n\n                                if (key.id != permission.children[0].id) {\n                                    _.map(key.dependencies, function(dependency) {\n\n                                        if (_.includes(key.dependencies, childId) && status == \"3\") {\n\n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', false);\n\n                                        }\n                                    });\n                                }\n                            })\n                        }\n\n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function(groupchild) {\n\n                                var pluckedGroupChildIDs = _.map(groupchild.children, 'id'), \n                                keyPermissionsGroup = [];\n\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n\n                                    _.map(groupchild.children, function(key2) {\n\n                                        if (key2.id != groupchild.children[0].id) {\n                                            _.map(key2.dependencies, function(dependency) {\n\n                                                if (_.includes(key2.dependencies, childId) && status == \"3\") {\n\n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', true);\n\n                                                } else {\n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', false);\n\n                                                }\n                                            })\n                                        }\n                                    });\n                                }\n                            })\n                        }\n\t\t\t\t\t})\n              \t}\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    // scope.preparePermissionData();\n                    __Form.process({\n                        'apiURL' : 'manage.user.role_permission.write.create',\n                        'roleId' : roleId\n                    }, scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog();\n                        });\n                    });\n                };\n\n                /*\n                 * Check if value updated then enable and disable radio button according to\n                 * current radio button\n                 *\n                 * @param string name\n                 * @param number value\n                 * @param array dependencies\n                 * @param bool inheritStatus\n                 *\n                 * return array\n                 * -------------------------------------------------------------------------- */\n                scope.valueUpdated = function(name, value, dependencies, inheritStatus) {\n\n                    _.forEach(scope.accessData.permissions, function(permission) {\n                        if (permission[0].name == name) {\n\n                            if (permission[0].allow == 2) { //Allow\n\n                                _.map(permission, function(item) {\n                                    if (!_.isEmpty(item.dependencies)) {\n                                        item.disabled = false;\n                                    }\n                                });\n\n                            } else if (permission[0].allow == 3) { // Deny\n\n                                _.map(permission, function(item) {\n                                    if (!_.isEmpty(item.dependencies)) {\n                                        item.disabled = true;\n                                        item.allow = 3;\n                                    }\n                                });\n\n                            } else if (permission[0].allow == 1) { // Inherited\n\n                                if (permission[0].currentStatus) {\n\n                                    _.map(permission, function(item) {\n                                        if (!_.isEmpty(item.dependencies)) {\n                                            item.disabled = false;\n                                            item.allow = 1;\n                                        }\n                                    });\n\n                                } else {\n\n                                    _.map(permission, function(item) {\n                                        if (!_.isEmpty(item.dependencies)) {\n                                            item.disabled = true;\n                                            item.allow = 1;\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n                /**\n          * Add new Role Permission Controller\n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('AddRoleController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'addSupportData',\n            'appServices',\n            'RolePermissionDataService',\n            function ($scope, __DataStore, __Form, $stateParams, addSupportData, appServices, RolePermissionDataService) {\n\n                var scope  = this;\n\n                scope  = __Form.setup(scope, 'add_role', 'roleData', {\n                    secured : false,\n                    unsecuredFields : []\n                });\n\n                scope.userRoles = addSupportData.userRoles; \n                scope.permissions = addSupportData.permissionData;\n                scope.roleData.allow_permissions = [];\n\t\t\t\tscope.roleData.deny_permissions = [];\n\t\t\t\tscope.checkedPermission = {};\n\n                scope.disablePermissions = function(eachPermission, permissionID) {\n\n                    _.map(eachPermission.children, function(key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function(text) {\n                                $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n\n                }\n\n\n                /*\n                 Get Permission basis on the role id\n                -------------------------------------------------------------------------- */\n                scope.getPermissions = function(roleId) {\n\n                    RolePermissionDataService\n                        .getAllPermissionsById(roleId)\n                        .then(function(responseData) {\n\n                            scope.permissions = responseData.permissionData;\n                            scope.roleData.selected_permissions = responseData.allowedData;\n\n                            scope.roleData.allow_permissions = responseData.allow_permissions;\n \t\t\t\t\t\t\tscope.roleData.deny_permissions = responseData.deny_permissions;\n \t\t\t\t\t\t\tscope.checkedPermission = {};\n\n\t\t\t\t\t\t\t_.map(scope.roleData.allow_permissions, function(permission) {\n\t\t\t\t\t\t\t \tscope.checkedPermission[permission] = \"2\";\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t_.map(scope.roleData.deny_permissions, function(permission) {\n\t\t\t\t\t\t\t \tscope.checkedPermission[permission] = \"3\";\n\n                                 _.map(scope.permissions, function(eachPermission) {\n\n                                    var pluckedIDs = _.map(eachPermission.children, 'id');\n\n                                    if (_.includes(pluckedIDs, permission)) {\n                                        scope.disablePermissions(eachPermission, permission)\n                                    }\n\n                                    if (_.has(eachPermission, 'children_permission_group')) {\n\n                                        _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                            var pluckedIDs = _.map(groupchild.children, 'id');\n\n                                            if (_.includes(pluckedIDs, permission)) {\n                                                scope.disablePermissions(groupchild, permission)\n                                            }\n                                        });\n                                    }\n                                });\n\t\t\t\t\t\t\t})\n                        })\n                };\n\n \t\t\t\t//for updating permissions\n                scope.checkPermission = function(childId, status) {\n\n \t\t\t\t\tif (!_.isString(status)) {\n \t\t\t\t\t\tstatus = status.toString();\n \t\t\t\t\t}\n\n \t\t\t\t\tscope.checkedPermission[childId] = status;\n\n                 \tif (status == \"2\") {\n\n                \t\tif(!_.includes(scope.roleData.allow_permissions, childId)) {\n                 \t\t\tscope.roleData.allow_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.roleData.deny_permissions, childId)) {\n                 \t\t\tscope.roleData.deny_permissions = _.without(scope.roleData.deny_permissions, childId);\n                 \t\t}\n\n                \t} else if (status == \"3\")  {\n\n\t                   \tif(!_.includes(scope.roleData.deny_permissions, childId)) {\n                 \t\t\tscope.roleData.deny_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.roleData.allow_permissions, childId)) {\n                 \t\t\tscope.roleData.allow_permissions = _.without(scope.roleData.allow_permissions, childId);\n                 \t\t}\n                \t}\n\n                \t_.map(scope.permissions, function(permission) {\n\n                        var pluckedIDs = _.map(permission.children, 'id'), \n                        keyPermissions = [];\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n                            _.map(permission.children, function(key) {\n\n                                if (key.id != permission.children[0].id) {\n                                    _.map(key.dependencies, function(dependency) {\n\n                                        if (_.includes(key.dependencies, childId) && status == \"3\") {\n\n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', false);\n\n                                        }\n                                    });\n                                }\n                            })\n                        }\n\n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function(groupchild) {\n\n                                var pluckedGroupChildIDs = _.map(groupchild.children, 'id'),\n                                keyPermissionsGroup = [];\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n                                    _.map(groupchild.children, function(key2) {\n                                        if (key2.id != groupchild.children[0].id) {\n                                            _.map(key2.dependencies, function(dependency) {\n                                                if (_.includes(key2.dependencies, childId) && status == \"3\") {\n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', true);\n\n                                                } else {\n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', false);\n\n                                                }\n                                            })\n                                        }\n                                    });\n                                }\n\n                            });\n                        }\n\t\t\t\t\t})\n                }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n                scope.submit = function() {\n                    // scope.preparePermissions();\n                    __Form.process('manage.user.role_permission.write.role.create', scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog({'role_Added' : true});\n                        });\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Dashboard\n*  File       : ActivityDataServices.js  \n*  Engine     : ActivityDataServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ActivityDataServices', [])\n        .service('ActivityDataServices',[\n            '$q', \n            '__DataStore', \n            'appServices',\n            ActivityDataServices\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function ActivityDataServices($q, __DataStore, appServices) {\n            \n        };\n\n    \n})(window, window.angular);\n","/*!\n*  Component  : Activity\n*  File       : ActivityEngine.js  \n*  Engine     : ActivityEngine \n----------------------------------------------------------------------------- */\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ActivityEngine', [])\n\t\t\n\t\t/**\n          * Calendar Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('ActivityLogListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'ActivityDataServices',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, ActivityDataServices) {\n\t\t\t\tvar dtColumnsData = [\n\t\t\t\t\t{\n\t                    \"name\"      : \"created_at\",\n\t                    \"orderable\" : true,\n\t                },\n\t\t\t\t\t{\n\t                    \"name\"      : \"created_by_user\",\n\t                    \"orderable\" : true,\n\t                },\n\t                {\n\t                    \"name\"      : \"entity_type\",\n\t                    \"orderable\" : true,\n\t                },\n\t\t\t\t\t{\n\t                    \"name\"      : \"ip\",\n\t                    \"orderable\" : false,\n\t                },\n                    {\n                        \"name\"      : 'activity'\n                    },\n                    {\n                        \"name\"      : 'description'\n                    }\n\t            ],\n\t            scope   = this;\n\n\t            //form setup\n\t\t        scope  = __Form.setup(scope, 'activity_form_filters', 'activityLogsData', {\n\t                secured : false,\n\t                unsecuredFields : []\n\t            });\n\n\t            /**\n\t            * Declare separate variables do not use non-repeatedly\n\t            *\n\t            * @return  void\n\t            *---------------------------------------------------------- */\n\t\t\t\tscope.getDate = function(duration, dateFrom, dateTo){\n\t\t\t\t\tscope.startDate = dateFrom;\n\t\t\t\t\tscope.endDate = dateTo;\n\t\t\t\t\tscope.duration = duration;\n\t\t\t\t};\n\t\t\t\t \n\t\t\t\t/**\n\t            * Start Date greater than end date ,then convert start date to end date\n\t            *\n\t            * @return  void\n\t            *---------------------------------------------------------- */\n\t\t\t\tscope.changeDate = function(startDate, endDate){\n\t\t\t\t\t\n\t\t\t\t\tif(scope.startDate > scope.endDate){\n\t\t\t\t\t\t\n\t\t\t\t\t\tscope.endDate = scope.startDate;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t            /**\n\t            * define all Variables data\n\t            *\n\t            * @return  void\n\t            *---------------------------------------------------------- */\n\t\t\t\tvar dateFrom, dateTo,\n\t\t\t\t \t\n\t\t\t\t\tstartCurrentMonth = moment().startOf('month').format('YYYY-MM-D'),\n\t\t\t\t\tendCurrentMonth = moment().endOf('month').format('YYYY-MM-D'),\n\n\t\t\t\t\tstartLastMonth = moment().subtract(1,'months').startOf('month').format('YYYY-MM-D'),\n\t\t\t\t\tendLastMonth = moment().subtract(1,'months').endOf('month').format('YYYY-MM-D'),\n\n\t\t\t\t\tstartCurrentWeek = moment().startOf('week').format('YYYY-MM-D'),\n\t\t\t\t\tendCurrentWeek = moment().endOf('week').format('YYYY-MM-D'),\n\t\t\t\t\t\n\t\t\t\t\tstartLastWeek = moment().subtract(1,'week').startOf('week').format('YYYY-MM-D'),\n\t\t\t\t\tendLastWeek = moment().subtract(1,'week').endOf('week').format('YYYY-MM-D'),\n\n\t\t\t\t\tstartToday = moment().startOf('day').format('YYYY-MM-D'),\n\t\t\t\t\tendToday = moment().endOf('day').format('YYYY-MM-D'),\n\n\t\t\t\t\tstartYesterday = moment().subtract(1, 'day').format('YYYY-MM-D'),\n\t\t\t\t\tendYesterday = moment().subtract(1, 'day').format('YYYY-MM-D'),\n\n\t\t\t\t\tstartLastYear = moment().subtract(1, 'years').startOf('years').format('YYYY-MM-D'),\n\t\t\t\t\tendLastYear = moment().subtract(1, 'years').endOf('years').format('YYYY-MM-D'),\n\n\t\t\t\t\tstartCurrentYear = moment().startOf('years').format('YYYY-MM-D'),\n\t\t\t\t\tendCurrentYear = moment().endOf('years').format('YYYY-MM-D'),\n\t\t\t\t\t\n\t\t\t\t\tstartLastThirtyDays = moment().subtract(30, 'days').format('YYYY-MM-D'),\n\t\t\t\t\tendLastThirtyDays =  moment().format('YYYY-MM-D');\n\n\t\t\t\t/**\n\t            * Get the all Duration value and use moment library to fetch date\n\t            *\n\t            * @return  void\n\t            *---------------------------------------------------------- */\n\t\t\t\tscope.activityDataTable = function(duration, startDate, endDate) {\n\t\t\t\t\n\t\t\t\t\tswitch(parseInt(duration)) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t    dateFrom = startCurrentMonth;\n\t\t\t\t\t\t\tdateTo   = endCurrentMonth;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tdateFrom = startLastMonth;\n\t\t\t\t\t\t\tdateTo = endLastMonth;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tdateFrom = startCurrentWeek;\n\t\t\t\t\t\t\tdateTo = endCurrentWeek;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tdateFrom = startLastWeek;\n\t\t\t\t\t\t    dateTo = endLastWeek;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t   \n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 5:\n\t\t\t\t\t\t    dateFrom = startToday;\n\t\t\t\t\t\t\tdateTo = endToday;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\tdateFrom = startYesterday;\n\t\t\t\t\t\t\tdateTo = endYesterday;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 7:\n\t\t\t\t\t\t\tdateFrom = startLastYear;\n\t\t\t\t\t\t\tdateTo = endLastYear;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\tdateFrom = startCurrentYear;\n\t\t\t\t\t\t\tdateTo = endCurrentYear;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 9:\n\t\t\t\t\t\t\tdateFrom = startLastThirtyDays;\n\t\t\t\t\t\t\tdateTo = endLastThirtyDays;\n\t\t\t\t\t\t\tscope.getDate(duration, dateFrom, dateTo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\tvar manipulateDate = \"Add Custom date\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\n\t\t\t\t};\n\n\t            /**\n\t            * Request to server\n\t            *\n\t            * @return  void\n\t            *---------------------------------------------------------- */\n\t            scope.dateChange = function() {\n\t            \t\n\t            \tif (scope.activityLogDataTable){\n\t\t\t\t\t\tscope.activityLogDataTable.destroy();\n\t\t\t\t\t}\n\n\t\t            scope.activityLogDataTable = __DataStore.dataTable('#lwActivityLogList', {\n\t\t                url         : {\n\t\t\t\t\t\t\t'apiURL'    : 'manage.activity_log.read.list',\n\t\t\t\t\t\t\t'startDate' : scope.startDate,\n\t\t\t\t\t\t\t'endDate'   : scope.endDate\n\t\t\t\t\t\t},\n\t\t                dtOptions   : {\n\t\t                    \"searching\": true,\n\t\t                    \"order\": [[ 0, 'desc' ]],\n\t\t                    \"pageLength\" : 25\n\t\t                },\n\t\t                columnsData : dtColumnsData, \n\t\t                scope       : $scope\n\t\t            }, null, function(responseData) {\n\t\t            \tscope.durations \t= responseData._options.durations;\n\t\t            });\n\t            };\n\t            /*\n\t            Reload current datatable\n\t            ------------------------------------------------------------ */\n\t            scope.reloadDT = function() {\n\t                __DataStore.reloadDT(scope.activityLogDataTable);\n\t            };\n\t            \n\t            // when add new record \n\t            $scope.$on('activity_added_or_updated', function (data) {\n\t                \n\t                if (data) {\n\t                    // scope.reloadDT();\n\t                    scope.dateChange('Today',moment().format('YYYY-MM-D'),moment().format('YYYY-MM-D'));\n\t                }\n\n\t            });\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t/**\n\t            * Calling activityDataTable() function to get the current value.\n\t            *\n\t            * @return  void\n\t            *---------------------------------------------------------- */\n\t\t\t\tscope.activityDataTable('1',moment().format('YYYY-MM-D'),moment().format('YYYY-MM-D'));\n\t\t\t\t\n\t\t\t\tscope.dateChange();\n            }\n        ])\n\t;\t\n\n})(window, window.angular);","/*!\n*  Component  : Project\n*  File       : ProjectDataServices.js  \n*  Engine     : ProjectServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ProjectDataServices', [])\n        .service('ProjectDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            ProjectDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function ProjectDataService($q, __DataStore, appServices) {\n\n\t\t    /*\n\t\t    Get Add Support Data\n\t\t    -------------------------------------------------------------- */\n\t\t    this.getAddSupportData = function() {\n\n\t\t        //create a differed object\n\t\t        var defferedObject = $q.defer();\n\n\t\t        __DataStore.fetch('manage.project.read.support_data')\n\t\t            .success(function(responseData) {\n\n\t\t            appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t                //this method calls when the require        \n\t\t                //work has completed successfully        \n\t\t                //and results are returned to client        \n\t\t                defferedObject.resolve(responseData.data);\n\t\t            }); \n\t\t        });\n\n\t\t        //return promise to caller          \n\t\t        return defferedObject.promise; \n\t\t    };\n\n\t\t    /*\n\t\t    Get Edit Support Data\n\t\t    -------------------------------------------------------------- */\n\t\t    this.getEditSupportData = function(projectIdOrUid) {\n\n\t\t        //create a differed object\n\t\t        var defferedObject = $q.defer();\n\n\t\t        __DataStore.fetch({\n\t\t            'apiURL': 'manage.project.read.update.data',\n\t\t            'projectIdOrUid'   : projectIdOrUid\n\t\t        }, {fresh:true}).success(function(responseData) {\n\n\t\t            appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t                //this method calls when the require        \n\t\t                //work has completed successfully        \n\t\t                //and results are returned to client        \n\t\t                defferedObject.resolve(responseData.data);\n\t\t            }); \n\t\t        });\n\n\t\t        //return promise to caller          \n\t\t        return defferedObject.promise; \n\t\t    };\n\n\t\t    /*\n\t\t    Get Edit Support Data\n\t\t    -------------------------------------------------------------- */\n\t\t    this.getProjectDetails = function(projectIdOrUid) {\n\n\t\t        //create a differed object\n\t\t        var defferedObject = $q.defer();\n\n\t\t        __DataStore.fetch({\n\t\t            'apiURL': 'manage.project.read.details.data',\n\t\t            'projectIdOrUid'   : projectIdOrUid\n\t\t        }).success(function(responseData) {\n\n\t\t            appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t                //this method calls when the require        \n\t\t                //work has completed successfully        \n\t\t                //and results are returned to client        \n\t\t                defferedObject.resolve(responseData.data);\n\t\t            }); \n\t\t        });\n\n\t\t        //return promise to caller          \n\t\t        return defferedObject.promise; \n\t\t    };\n\n    \n        };\n\n})(window, window.angular);","/*!\n*  Component  : Project\n*  File       : Project.js  \n*  Engine     : Project \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ProjectEngine', [])\n        \n         \n        /**\n        * Project List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object ProjectDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProjectListController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',                \n            'ProjectDataService',\n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope, ProjectDataService) {\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"name\",\n                        \"orderable\" : true,\n                        'template'\t: '#projectDetailsTemplate'\n                    },\n                    {\n                        \"name\"      : \"created_at\",\n                        \"orderable\" : true,\n                        'template'\t: '#projectCreatedAtTemplate'\n                    },\n                    {\n                        \"name\"      : \"updated_at\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : \"formatted_status\",\n                    },\n                    {\n                        \"name\"      : \"formatted_type\",\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#projectActionColumnTemplate\"\n                    }\n                ],\n                scope   = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.projectDataTable = __DataStore.dataTable('#lwprojectList', {\n                    url         : 'manage.project.read.list', \n                    dtOptions   : {\n                        \"searching\": true\n                    },\n                    columnsData : dtColumnsData, \n                    scope       : $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.projectDataTable);\n                };\n                \n                // when add new record \n                $scope.$on('project_added_or_updated', function (data) {\n                    \n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\t\t\t\t\n\t\t\t\t/*\n                Project Add\n                ------------------------------------------------------------ */\n\t\t\t\tscope.addProject = function() {\n\n\t\t\t\t\tappServices.showDialog({}, {\n\t                    templateUrl     : \"project.add-dialog\",\n\t                    controller : 'ProjectAddController as projectAddCtrl',\n\t                    resolve : {\n\t\t\t                projectAddData : ['ProjectDataService', function(ProjectDataService) {\n\t\t\t\t\t\t\t\treturn ProjectDataService.getAddSupportData();\n\t\t\t                }]\n\t\t\t            }\n\t                }, function(promiseObj) {\n\n\t                    if (_.has(promiseObj.value, 'project_added_or_updated') && promiseObj.value.project_added_or_updated) {\n\n\t                        $rootScope.$broadcast('project_added_or_updated', true);\n\t                    }\n\n\t                    //$state.go('project');\n\n\t                });\n\n\t\t\t\t}\n\n                /*\n                Project edit\n                ------------------------------------------------------------ */\n\t\t\t\tscope.editProject = function(projectIdOrUid) {\n\n\t\t\t\t\tappServices.showDialog({\n\t\t\t\t\t\t'projectIdOrUid' : projectIdOrUid\n\t\t\t\t\t}, {\n\t                    templateUrl     : \"project.edit-dialog\",\n\t                    controller : 'ProjectEditController as projectEditCtrl',\n\t                    resolve : {\n\t\t\t                projectEditData : ['ProjectDataService', function(ProjectDataService) {\n\t\t\t\t\t\t\t\treturn ProjectDataService.getEditSupportData(projectIdOrUid);\n\t\t\t\t\t\t\t}]\n\t\t\t            }\n\t                }, function(promiseObj) {\n\n\t                    if (_.has(promiseObj.value, 'project_added_or_updated') && promiseObj.value.project_added_or_updated) {\n\n\t                        $rootScope.$broadcast('project_added_or_updated', true);\n\t                    }\n\t                });\n\n\t\t\t\t}\n\n\t\t\t\t/*\n                Project details\n                ------------------------------------------------------------ */\n\t\t\t\tscope.showProjectDetails = function(projectIdOrUid) {\n\n\t\t\t\t\tappServices.showDialog({\n\t\t\t\t\t\t'projectIdOrUid' : projectIdOrUid\n\t\t\t\t\t}, {\n\t                    templateUrl     : \"project.details-dialog\",\n\t                    controller : 'ProjectDetailsController as projectDetailsCtrl',\n\t                    resolve : {\n\t\t\t                ProjectDetailsData : ['ProjectDataService', function(ProjectDataService) {\n\t\t\t\t\t\t\t\treturn ProjectDataService.getProjectDetails(projectIdOrUid);\n\t\t\t\t\t\t\t}]\n\t\t\t            }\n\t                }, function(promiseObj) {\n\t                });\n\n\t\t\t\t}\n\n                /**\n                * Show Embeded Script Dialog \n                *\n                * inject projectIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n                scope.showEmbedScriptDialog = function(projectSlug) {\n\n                    appServices.showDialog({\n                        'projectSlug' : projectSlug,\n                        'embededType': 1\n                    }, {\n                        templateUrl : \"embed.embed-script-dialog\",\n                        controller  : 'EmbedScriptDialogController as EmbedScriptDialogCtrl',\n                    }, function(promiseObj) {\n                    });\n\n                }\n\n               /**\n                * project delete \n                *\n                * inject projectIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function(projectIdOrUid, projectName) {\n\n                \tscope.projectName = projectName;\n\n                \t_.defer(function(){\n\n                        var lwProjectDeleteConfirmTextMsg = $('#lwProjectDeleteConfirmTextMsg');\n \t \t\t\t\t\t \n                        __globals.showConfirmation({\n                            html                : lwProjectDeleteConfirmTextMsg .attr('data-message'),\n                            confirmButtonText   : lwProjectDeleteConfirmTextMsg .attr('data-delete-button-text')\n                        },\n                        function() {\n\n                        \t__DataStore.post({\n\t                            'apiURL' : 'manage.project.write.delete',\n\t                            'projectIdOrUid' : projectIdOrUid\n\t                        }).success(function(responseData) {\n\t                        \n\t\t\t\t\t\t\t\tvar message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n\n                                        error : function() {\n\n                                            __globals.showConfirmation({\n                                                title   : 'Deleted!',\n                                                text    : message,\n                                                type    : 'error'\n                                            });\n\n                                        }\n                                    },\n                                    function() {\n\n                                        __globals.showConfirmation({\n                                            title   : 'Deleted!',\n                                            text    : lwProjectDeleteConfirmTextMsg .attr('success-msg'),\n                                            type    : 'success'\n                                        });\n                                        scope.reloadDT();   // reload datatable\n\n                                    }\n                                );    \n\n\n\t                        });\n\n                        })\n\n                   });\n\n                };\n\n\n        }\n        ])\n        // Project List Controller ends here\n\n        /**\n        * Project Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProjectAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'projectAddData',\n            'lwFileUploader',\n            '__Utils',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope, projectAddData, lwFileUploader, __Utils) {\n\n                var scope = this;\n \t\t\t\tscope.project_type = projectAddData.project_type;\n \t\t\t\tscope.recent_languages = projectAddData.recent_languages;\n                scope.showLoader = true;\n                scope  = __Form.setup(scope, 'project_form', 'projectData', {\n                    secured : false,\n                    unsecuredFields : []\n                });\n\n                scope.projectData.status = 1;\n                scope.projectData.type = 1;\n                scope.languages = projectAddData.languages;\n                scope.languageSelectize  = __globals.getSelectizeOptions({\n                    valueField  : 'id',\n                    labelField  : 'name',\n                    searchField : ['name'],\n                    maxItems : null,\n                    plugins : ['remove_button'],\n                    onChange : function(value) {\n                    \tscope.updatePrimaryLangOptions(value);\n                    }\n                });\n\n                scope.primaryLanguageSelectize  = __globals.getSelectizeOptions({\n                    valueField  : 'id',\n                    labelField  : 'name',\n                    searchField : ['name']\n                });\n\n                scope.projectData.article_comments_status = 1;\n                scope.projectData.article_votes_status = 1;\n\n                scope.primarylanguages = [];\n\n                // Add New Language\n                scope.addNewLanguage = function() {\n                    appServices.showDialog(scope, {\n                        templateUrl     : __globals.getTemplateURL(\"language.add-dialog\"),\n                        controller : 'LanguageAddController as languageAddCtrl',\n                    }, function(promiseObj) {\n                        if (_.has(promiseObj.value, 'language_added_or_updated') \n                            && promiseObj.value.language_added_or_updated) {\n                            scope.languages.push(promiseObj.value.add_language_data);\n                        }\n                    });\n                }    \n\n                scope.updatePrimaryLangOptions = function(selected_lang) {\n                \tscope.primarylanguages = [];\n                \tscope.projectData.primary_language = '';\n                \t_.map(scope.languages, function(langoption) {\n            \t\t\tif (_.includes(selected_lang.split(','), langoption.id)) {\n            \t\t\t\tscope.primarylanguages.push(langoption);\n            \t\t\t}\n            \t\t});\n                }\n\n                scope.projectData.project_languages = [];\n                /*\n\t\t\t\t* select recent language\n                */\n                scope.selectRecentLanguage = function(langId) {\n                \tif (_.isUndefined(scope.projectData.project_languages)) {\n                \t\tscope.projectData.project_languages = [];\n                \t}\n                \t\n                \tif (!_.includes(scope.projectData.project_languages, langId)) {\n               \t\t\tscope.projectData.project_languages.push(langId);\n                \t}\n                }\n\n                /*\n\t            add dialog\n\t            ------------------------------------------------------------ */\n\t            scope.openVersionAddDialog = function(projectIdOrUid) {\n\n\t                appServices.showDialog({\n\t                    'projectUid' : projectIdOrUid\n\t                }, {\n\t                    templateUrl : __globals.getTemplateURL(\"version.add-dialog\"),\n\t                    controller  : 'VersionAddController as versionAddCtrl',\n\t                    resolve : {\n\t                        versionAddData : ['VersionDataService', function(VersionDataService) {\n\t                            return VersionDataService.getAddSupportData(projectIdOrUid);\n\t                        }]\n\t                    }\n\t                }, function(promiseObj) {\n\n\t                    if (_.has(promiseObj.value, 'version_added') && promiseObj.value.version_added) {\n\n\t                        $rootScope.$broadcast('load_versions_list');\n\t                    }\n\n\t                });\n\n\t            };\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('manage.project.write.create', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n\n                        \tif (responseData.reaction) {\n                        \t\t$scope.closeThisDialog( {'project_added_or_updated' : true} );\n                                if ($rootScope.canAccess('manage.project.version.read.list')) {\n                                    $state.go('project_versions', {\n                                        'projectIdOrUid' : responseData.data.projectIdOrUid\n                                    });\n                                }\n                        \t}\n                        });    \n\n                    });\n                };\n\n                // uploader file instance\n                $scope.upload = function() {\n\t\t\t\t\n                    lwFileUploader.upload({\n\t\t\t\t\t    'url' : __Utils.apiURL('media.upload.write.project')\n\t\t\t\t\t}, function(response) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar fileDetails =  response.result.data.fileDetails;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!_.isUndefined(fileDetails)) {\n\n\t\t\t\t\t\t\tif (fileDetails.extension === 'ico') {\n\t\t\t\t\t\t\t\tscope.projectData.favicon_image = fileDetails.file_name;\n\t\t\t\t\t\t\t\tscope.favicon_image_url = fileDetails.url;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tscope.projectData.logo_image = fileDetails.file_name;\n\t\t\t\t\t\t\t\tscope.logo_image_url = fileDetails.url;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n                };\n\n                $(document).bind('dragover', function (e) {\n                \t$scope.upload();\n\t\t\t\t});\n\n\t\t\t\t$rootScope.$on('lw-loader-event-start', function (event, data) {\n\t\t\t\t\t\n\t\t\t\t\t$scope.loading = true; \n\t\t\t\t\t$(\"#lwFileupload\").attr(\"disabled\", true);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$rootScope.$on('lw-loader-event-stop', function (event, data) {\n\n\t\t\t\t\t$scope.loading = false; \n\t\t\t\t\t $(\"#lwFileupload\").attr(\"disabled\", false); \n\t\t\t\t});\n\n\n                /**\n                  * Generate slug\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n                scope.generateSlug = function(string) {\n                \tscope.projectData.slug = __globals.slug(string);\n                }\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // ProjectAddController ends here\n\n        /**\n        * Project Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProjectEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'projectEditData',\n\t\t\t'lwFileUploader',\n\t\t\t'__Utils',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope, projectEditData, lwFileUploader, __Utils) {\n\n            var scope = this;\n            scope.showLoader = true;\n\t\t\tscope.projectIdOrUid = $scope.ngDialogData.projectIdOrUid;\n            \n            scope  = __Form.setup(scope, 'project_form', 'projectData', {\n                secured : false,\n                unsecuredFields : []\n            });\n\n            var requestData = projectEditData;\n            scope = __Form.updateModel(scope, requestData.edit_data);\n            scope.logoImageExists = requestData.logoImageExists;\n            scope.faviconImageExist = requestData.faviconImageExist;\n            scope.showLoader = false;\n            scope.languages = projectEditData.languages;\n            scope.projectLanguages = projectEditData.projectLanguages;\n\n            scope.languageSelectize  = __globals.getSelectizeOptions({\n                valueField  : 'lang_id',\n                labelField  : 'name',\n                searchField : ['name'],\n                plugins : ['remove_button'],\n\t\t\t\tmaxItems    : null,\n\t\t\t\tdelimiter   : ',',\n\t\t\t\tpersist     : false,\n                onDelete : function(values) {\n                    var $instance = this;\n                    scope.deleteLanguage(values[0], $instance)\n                    .then(function(success) {\n                        return true;\n                    })\n                    .catch(function(error) {\n                        return false;\n                    });\n                    return false;\n                }\n            });\n\n            scope.primaryLanguageSelectize  = __globals.getSelectizeOptions({\n                valueField  : 'lang_id',\n                labelField  : 'name',\n                searchField : ['name']\n            });\n\n\t\t\tscope.primarylanguages = [];\n\n            /*\n            * Delete Language\n            */\n            scope.deleteLanguage = function(languageId, instance) {\n                return new Promise(function(resolve, reject) {\n                    var $lwLanguageDeleteConfirm = $('#lwLanguageDeleteConfirm');\n                    if (_.includes(scope.projectLanguages, languageId)) {\n                        __globals.showConfirmation({\n                            html                : $lwLanguageDeleteConfirm.attr('data-message'),\n                            confirmButtonText   : $lwLanguageDeleteConfirm.attr('data-delete-button-text')\n                        },\n                        function() {\n                            __DataStore.post({\n                                'apiURL' : 'manage.project.write.language_delete',\n                                'projectIdOrUid' : scope.projectIdOrUid,\n                                'languageId' : languageId\n                            }).success(function(responseData) {                        \n                                var message = responseData.data.message;\n                                appServices.processResponse(responseData, {\n                                    error : function() {\n                                        __globals.showConfirmation({\n                                            title   : 'Deleted!',\n                                            text    : message,\n                                            type    : 'error'\n                                        });\n                                        reject('error');\n                                    }\n                                },\n                                function() {\n                                    __globals.showConfirmation({\n                                        title   : 'Deleted!',\n                                        text    : scope.successMsgText,\n                                        type    : 'success'\n                                    });\n                                    instance.removeOption(languageId);\n                                    instance.refreshOptions();\n                                    instance.clearCache();\n                                    resolve('success');\n                                });\n                            });\n                        })\n                    } else {\n                        instance.removeOption(languageId);\n                        instance.refreshOptions();\n                        instance.clearCache();\n                    }\n                });\n            }\n\n            /**\n            * Delete Logo or Favicon\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n            scope.deleteMedia = function(mediaType) {\n                __DataStore.post({\n                    'apiURL': 'manage.project.write.media_delete',\n                    'projectIdOrUid': scope.projectIdOrUid,\n                    'mediaType': mediaType\n                }, {}).success(function(responseData) {\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                        if (reactionCode == 1) {\n                            if (mediaType == 1) {\n                                scope.logo_image_url = '';\n                            } else if (mediaType == 2) {\n                                scope.favicon_image_url = '';\n                            }\n                        }\n                    });  \n                });\n            }\n\n            /**\n            * Submit form\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n\n                __Form.process({\n                    'apiURL': 'manage.project.write.update',\n                    'projectIdOrUid'   : scope.projectIdOrUid\n                }, scope).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog( {'project_added_or_updated' : true} );\n                        });    \n                });\n\n            };\n\n   \t\t\tscope.logo_image_url = scope.projectData.logo_image_url;\n   \t\t\tscope.favicon_image_url = scope.projectData.favicon_image_url;\n\n            // uploader file instance\n                $scope.upload = function() {\n\t\t\t\t\n                    lwFileUploader.upload({\n\t\t\t\t\t    'url' : __Utils.apiURL('media.upload.write.project')\n\t\t\t\t\t}, function(response) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar fileDetails =  response.result.data.fileDetails;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!_.isUndefined(fileDetails)) {\n\n\t\t\t\t\t\t\tif (fileDetails.extension === 'ico') {\n\t\t\t\t\t\t\t\tscope.projectData.favicon_image = fileDetails.file_name;\n\t\t\t\t\t\t\t\tscope.favicon_image_url = fileDetails.url;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tscope.projectData.logo_image = fileDetails.file_name;\n\t\t\t\t\t\t\t\tscope.logo_image_url = fileDetails.url;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n                };\n\n                $(document).bind('dragover', function (e) {\n                \t$scope.upload();\n\t\t\t\t});\n\n\t\t\t\t$rootScope.$on('lw-loader-event-start', function (event, data) {\n\t\t\t\t\t\n\t\t\t\t\t$scope.loading = true; \n\t\t\t\t\t$(\"#lwFileupload\").attr(\"disabled\", true);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$rootScope.$on('lw-loader-event-stop', function (event, data) {\n\n\t\t\t\t\t$scope.loading = false; \n\t\t\t\t\t $(\"#lwFileupload\").attr(\"disabled\", false); \n\t\t\t\t});\n\n            /**\n              * Generate slug\n              *\n              * @return  void\n              *---------------------------------------------------------------- */\n            scope.generateSlug = function(string) {\n            \tscope.projectData.slug = __globals.slug(string);\n            }\n\n            /**\n            * Close dialog\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n\n            }\n\n        ])\n        // Project Edit Controller ends here\n\n\n         /**\n        * Project Details Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProjectDetailsController', [\n            '$scope',\n            'appServices',\n            'ProjectDetailsData', \n        function ( $scope, appServices, ProjectDetailsData) {\n\n                var scope = this;\n \t\t\t\tscope.projectData = ProjectDetailsData.projectData;\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // ProjectAddController ends here\n\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Article\n*  File       : ArticleDataServices.js  \n*  Engine     : ArticleServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ArticleDataServices', [])\n        .service('ArticleDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            ArticleDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function ArticleDataService($q, __DataStore, appServices) {\n\n            \n            /*\n            Get Add Support Data\n            -------------------------------------------------------------- */\n            this.getAddSupportData = function(projectUid, versionUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \t\t\n                __DataStore.fetch({\n\t\t\t\t\t'apiURL': 'manage.article.read.support_data',\n                    'projectUid'   : (projectUid) ? projectUid : null,\n                    'versionUid'   : (versionUid) ? versionUid : null\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n            /*\n            Get Edit Support Data\n            -------------------------------------------------------------- */\n            this.getEditSupportData = function(articleIdOrUid, projectUid, versionUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL': 'manage.article.read.update.data',\n                    'articleIdOrUid'   : articleIdOrUid,\n                    'projectUid'   : (projectUid) ? projectUid : null,\n                    'versionUid'   : (versionUid) ? versionUid : null\n\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get Votes Support Data\n            -------------------------------------------------------------- */\n            this.getVotesSupportData = function(articleIdOrUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL': 'manage.article.votes.read',\n                    'articleIdOrUid'   : articleIdOrUid,\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get article content details\n            -------------------------------------------------------------- */\n            this.getArticleContentDetails = function(contentUid, articleIdOrUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL': 'manage.article.read.content_details',\n                    'articleIdOrUid' : articleIdOrUid,\n\t\t\t\t\t'contentUid' : contentUid\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get article details\n            -------------------------------------------------------------- */\n            this.getArticleDetails = function(articleIdOrUid) {\n        \t\n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL': 'manage.article.read.details',\n                    'articleIdOrUid' : articleIdOrUid\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get Articles\n            -------------------------------------------------------------- */\n            this.getArticles = function(projectUid, versionUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL'    : 'manage.article.read.list',\n                    'projectUid?' : projectUid,\n                    'versionUid?' : versionUid,\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n\n        };\n\n})(window, window.angular);","/*!\n*  Component  : Article\n*  File       : Article.js  \n*  Engine     : Article \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.ArticleEngine', [])\n        \n         \n        /**\n        * Article List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object ArticleDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ArticleListController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',\n            '$rootScope',                \n            'appNotify',\n            'GetVersionDetails',\n            'GetArticles',\n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope, appNotify, GetVersionDetails, GetArticles) {\n\n            var scope   = this;\n\n                scope.projectUid  = $state.params.projectUid;\n                scope.versionUid  = $state.params.versionUid;\n                \n                scope.version_info = GetVersionDetails.versionData;\n                scope.project_info = GetVersionDetails.project_info;\n                scope.articles = GetArticles.articles;\n                scope.projectSlug  = GetArticles.projectSlug;\n\t\t\t\tscope.versionSlug  = GetArticles.versionSlug;\n                scope.languages__id = GetArticles.languages__id;\n                /**\n                 * Get Articles Tree Data\n                 * @return \n                 */\n                scope.getArticles = function() \n                {\n                    __DataStore.fetch({\n                        'apiURL'    : 'manage.article.read.list',\n                        'projectUid?' : scope.projectUid,\n                        'versionUid?' : scope.versionUid,\n                    }).success(function(responseData) {\n            \n                        appServices.processResponse(responseData, null, function(reactionCode) {\n\n                            scope.articles = responseData.data.articles;\n\t\t\t\t\t\t\tscope.projectSlug  = responseData.data.projectSlug;\n\t\t\t\t\t\t\tscope.versionSlug  = responseData.data.versionSlug;\n                            scope.languages__id = responseData.data.languages__id;\n                        }); \n                    });\n                };\n\n                \n                // when add new record \n                $scope.$on('article_added_or_updated', function (data) {\n                    \n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n\n                /*\n                Project Add\n                ------------------------------------------------------------ */\n\t\t\t\tscope.addArticle = function() {\n\n\t\t\t\t\tappServices.showDialog({}, {\n\t                    templateUrl     : \"article.add-dialog\",\n\t                    controller : 'ArticleAddController as articleAddCtrl',\n\t                    resolve : {\n\t\t\t                articleAddData : ['ArticleDataService', function(ArticleDataService) {\n\t\t\t\t\t\t\t\treturn ArticleDataService.getAddSupportData();\n\t\t\t                }]\n\t\t\t            }\n\t                }, function(promiseObj) {\n\n\t                    if (_.has(promiseObj.value, 'article_added_or_updated') && promiseObj.value.article_added_or_updated) {\n\n\t                        $rootScope.$broadcast('article_added_or_updated', true);\n\t                    }\n\t                });\n\t\t\t\t}\n\n\t\t\t\tscope.showArticleContentDetails = function(contentUid, articleIdOrUid) {\n\n\t\t\t\t\tappServices.showDialog({\n\t\t\t\t\t\t'articleIdOrUid' : articleIdOrUid,\n\t\t\t\t\t\t'contentUid' : contentUid\n\t\t\t\t\t}, {\n\t                    templateUrl     : \"article.article-content-details-dialog\",\n\t                    controller : 'ArticleContentDetailsController as ArticleContentDetailsCtrl',\n\t                    resolve : {\n\t\t\t                ArticleContentData : ['ArticleDataService', function(ArticleDataService) {\n\t\t\t\t\t\t\t\treturn ArticleDataService.getArticleContentDetails(contentUid, articleIdOrUid);\n\t\t\t\t\t\t\t}]\n\t\t\t            }\n\t                }, function(promiseObj) {\n\t                });\n\t\t\t\t}\n\n               /**\n                * project delete \n                *\n                * inject projectIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function(articleIdOrUid, articleName) {\n\n                \tscope.articleName = articleName;\n\n                \t_.defer(function(){\n\n                        var lwArticleDeleteConfirmTextMsg = $('#lwArticleDeleteConfirmTextMsg');\n \t \t\t\t\t\t \n                        __globals.showConfirmation({\n                            html                : lwArticleDeleteConfirmTextMsg .attr('data-message'),\n                            confirmButtonText   : lwArticleDeleteConfirmTextMsg .attr('data-delete-button-text')\n                        },\n                        function() {\n\n                        \t__DataStore.post({\n\t\t\t\t\t\t\t\t'apiURL' : 'manage.article.write.delete',\n                            \t'articleIdOrUid' : articleIdOrUid\n\t                        }).success(function(responseData) {\n\t                        \n\t\t\t\t\t\t\t\tvar message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n\n                                        error : function() {\n\n                                            __globals.showConfirmation({\n                                                title   : 'Deleted!',\n                                                text    : message,\n                                                type    : 'error'\n                                            });\n\n                                        }\n                                    },\n                                    function() {\n\n                                        __globals.showConfirmation({\n                                            title   : 'Deleted!',\n                                            text    : lwArticleDeleteConfirmTextMsg .attr('success-msg'),\n                                            type    : 'success'\n                                        });\n                                        \n                                        scope.getArticles(); // reload content\n\n                                    }\n                                );    \n\n\n\t                        });\n\n                        })\n\n                   });\n\n                };\n\n\t\t\t\tscope.showArticleEmbedScriptDialog = function(projectSlug, versionSlug, articleSlug, lang) {\n                    \n\t\t\t\t\tappServices.showDialog({\n\t\t\t\t\t\t'projectSlug' : projectSlug,\n                        'versionSlug' : versionSlug,\n                        'articleSlug' : articleSlug,\n                        'language': lang,\n                        'embededType': 3\n\t\t\t\t\t}, {\n\t                    templateUrl : \"embed.embed-script-dialog\",\n\t                    controller  : 'EmbedScriptDialogController as EmbedScriptDialogCtrl',\n\t                }, function(promiseObj) {\n\t                });\n                }                \n\n                $scope.toggle = function (scope) {\n                    scope.toggle();\n                };\n            \n                $scope.treeOptions = {\n                    accept: function(sourceNodeScope, destNodesScope, destIndex) {\n                        return true;\n                    },\n                    beforeDrop : function (e) {\n\n                        var sourceValue  = e.source.nodeScope.$modelValue,\n                            parentData   = e.dest.nodesScope.node ? \n                                            e.dest.nodesScope.node \n                                            : undefined,\n                            newParentId = !_.isUndefined(parentData) ? parentData._id : '',\n                            nodesScopeArr = e.dest.nodesScope.$modelValue;\n\n                            _.delay(function() {\n                                if (sourceValue) {\n                                    if (nodesScopeArr.length > 0) {\n                                        var listOrderData = [];\n    \n                                        _.forEach(_.compact(nodesScopeArr), function(item, key) {\n                                            \n                                            listOrderData.push({\n                                                _id         : item._id,\n                                                list_order  : key + 1,\n                                                previous_articles__id : newParentId\n                                            });\n                                          \n                                        });\n            \n                                        __DataStore.post({\n                                            'apiURL'         : 'manage.article.write.update_parent',\n                                            'articleIdOrUid' : sourceValue._uid\n                                        }, {\n                                            'parentId'      : newParentId,\n                                            'listOrderData' : listOrderData\n                                        }).success(function(responseData) {\n                    \n                                            appServices.processResponse(responseData, null, function(reactionCode) {\n                                                scope.getArticles();\n                                            }); \n                    \n                                        });\n                                    }\n                                }\n                            }, 50);\n                        \n                    }\n                };\n        }\n        ])\n        // Article List Controller ends here\n\n        /**\n        * Embed Script Dialog Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('EmbedScriptDialogController', [\n            '$scope',                 \n            '__DataStore',                 \n            '__Form',                 \n            '$state',                 \n            'appServices',                 \n            '$rootScope',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope) {\n\n                var scope = this,\n \t\t\t\t    ngDialogData  = $scope.ngDialogData,\n                    embededType = ngDialogData.embededType;\n \t\t\t\tscope.articleTitle = ngDialogData.title;\n\n                // Prepare data for json stringify\n                scope.convertToString = function(embededParams) {\n                    var newEmbededData = [];\n                    _.forEach(embededParams, function(value) {\n                        newEmbededData.push(JSON.stringify(value));\n                    });\n                    return newEmbededData;\n                }\n\n                if (embededType == 1) { // Projects\n                    scope.scriptContent = scope.convertToString([\n                        ngDialogData.projectSlug\n                    ]);\n                } else if (embededType == 2) { // Version\n                    scope.scriptContent = scope.convertToString([\n                        ngDialogData.projectSlug, ngDialogData.versionSlug\n                    ]);\n                } else if (embededType == 3) { // Article\n                    scope.scriptContent = scope.convertToString([\n                        ngDialogData.projectSlug, ngDialogData.versionSlug, ngDialogData.articleSlug\n                    ]);\n                }\t\t\t\t\n\n \t\t\t\t/* for article */\n \t\t\t\tscope.loadArticleScript = function() {\n \t\t\t\t\treturn \"\\n<script type='text/javascript'>Docsyard.load(\"+scope.scriptContent+\");</script>\";\n \t\t\t\t}\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // ArticleAddController ends here\n\n        /**\n        * Article Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ArticleAddController', [\n            '$scope',                 \n            '__DataStore',                 \n            '__Form',                 \n            '$state',                 \n            'appServices',                 \n            '$rootScope',\n            'articleAddData',\n            'appNotify',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope, articleAddData, appNotify) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope.primaryArticleExist = true;\n                scope.isPrimaryLanguageSelected = true;\n                scope  = __Form.setup(scope, 'article_form', 'articleData', {\n                    secured : false,\n                    unsecuredFields : []\n                });\n\n                scope.projectSelectize  = __globals.getSelectizeOptions({\n                    valueField  : 'id',\n                    labelField  : 'name',\n                    searchField : ['name']  \n                });\n\n                scope.prevArticle  = __globals.getSelectizeOptions({\n                    valueField  : '_id',\n                    labelField  : 'title',\n                    searchField : ['title'],\n                    render: {\n                        option: function(item, escape) {\n                            var whitespace = '&nbsp',\n                            spaceCount = item.count,\n                            titleSpace = (item.count > 1) ? whitespace.repeat(spaceCount) + '&#8627 ' : '';\n                            return '<div>' +\n                                '<span class=\"title\">'+ titleSpace + escape(item.title) +'</span>' \n                                +\n                            '</div>';\n                        }\n                    } \n                });\n\n               // scope.primaryArticleExist = articleAddData.primaryArticleExist;\n                scope.articleData.articles_content = articleAddData.articles_content;\n                scope.version_info = articleAddData.versionData;\n                scope.project_info = articleAddData.projectName;\n                scope.articleData.projectUid = $state.params.projectUid;\n                scope.articleData.article_type = 1;\n                scope.articleData.doc_versions__id = scope.version_info._id;\n                scope.projectUid  = $state.params.projectUid;\n                scope.articlesList = articleAddData.articles;\n                \n                //for parent/child differentiation\n                scope.requestType = $state.params.requestType;\n                scope.projectName = articleAddData.projectName;\n \t\t\t\tscope.primaryLanguage = articleAddData.primaryLanguage; \n\n                //check is prev article exist then set it\n                if (_.has($state.params, 'prevArticle')) {\n                \tscope.articleData.previous_articles__id = $state.params.prevArticle;\n                }\n\n                //by default set primary language tab\n                //set selected tab id for title validation\n                scope.selectTabId = scope.primaryLanguage;\n\n                // Select tab / click on tab\n\t\t\t\tscope.selectedTab = function(event, primaryLanguageId, languageId) {\n\t\t\t\t\tevent.preventDefault();\n                    //set selected tab id for title validation\n                    scope.selectTabId = languageId;\n\n                    if (primaryLanguageId != languageId) {\n                        scope.isPrimaryLanguageSelected = false;\n                    } else {\n                        scope.isPrimaryLanguageSelected = true;\n                    }\n                    scope.checkPrimaryArticleExist();\n\t\t\t\t}\n\n                // Check if primary article exist\n                scope.checkPrimaryArticleExist = function() {\n                    var articleExist = false;\n                    if (!scope.isPrimaryLanguageSelected) {\n                        _.forEach(scope.articleData.articles_content, function(item) {\n                            if ((item.is_primary == 1) && ((_.isEmpty(item.description)) || (_.isEmpty(item.title)))) {\n                                articleExist = true;\n                            }\n                        });\n                    }\n                    // Check if article exist\n                    if (articleExist) {\n                        scope.primaryArticleExist = false;\n                    } else {\n                        scope.primaryArticleExist = true;\n                    }\n                }\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n \n                scope.submit = function(status) {\n                    scope.checkPrimaryArticleExist();\n                    // Check if primary language exist\n                    if (!scope.primaryArticleExist) {\n                        return appNotify.error('You have to add primary language article first.');                       \n                    }\n\n                \tscope.articleData.status = status;\n\n                    __Form.process({\n                        'apiURL'     : 'manage.article.write.create',\n                        'requestType' : scope.requestType,\n                        'projectUid' : (scope.projectUid) ? scope.projectUid : null\n                    }, scope).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            if (status == 1) {\n                                $state.go('project_articles', {'projectUid': scope.projectUid, 'versionUid' : scope.version_info._uid });\n                            } else if (status == 2 || status == 3) {\n                                $state.go('project_article_edit', {'projectUid': scope.projectUid, 'versionUid' : scope.version_info._uid, 'articleIdOrUid': responseData.data.article_uid });\n                            }\n                        \t\n                        });    \n\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // ArticleAddController ends here\n\n        /**\n        * Article Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ArticleEditController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',\n            'articleEditData',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope, articleEditData) {\n\n\t            var scope = this;\n\t            scope.showLoader = true;\n\n                scope  = __Form.setup(scope, 'article_form', 'articleData', {\n                    secured : false,\n                    unsecuredFields : []\n                });\n               \n                var requestData = articleEditData;\n                scope.articlesList = requestData.articles;\n                scope.projectName  = requestData.projectName;\n                scope.requestType = 2;\n                if (_.isNull(requestData.articleData.previous_articles__id)) {\n                \tscope.requestType = 1;\n                }\n                scope.version_info = articleEditData.versionData;\n                scope.project_info = articleEditData.projectName;\n                \n                scope = __Form.updateModel(scope, requestData.articleData);\n\n                scope.showLoader = false;\n\n                var articleIdOrUid  = $state.params.articleIdOrUid;\n                scope.projectUid = $state.params.projectUid;\n\n                if (!_.isUndefined($state.params.projectUid)) {\n \t\t\t\t\tscope.projectUid  = $state.params.projectUid;\n                } else {\n                \tscope.projectUid = 'null';\n                }\n                \n                scope.article_status = requestData.articleData.article_status;\n\n                scope.prevArticle  = __globals.getSelectizeOptions({\n                    valueField  : '_id',\n                    labelField  : 'title',\n                    searchField : ['title'],\n                    render: {\n                        option: function(item, escape) {\n                            var whitespace = '&nbsp',\n                            spaceCount = item.count,\n                            titleSpace = (item.count > 1) ? whitespace.repeat(spaceCount) + '&#8627 ' : '';\n                            return '<div>' +\n                                '<span class=\"title\">'+ titleSpace + escape(item.title) +'</span>' \n                                +\n                            '</div>';\n                        }\n                    } \n                });\n\n               \tscope.primaryLanguage = articleEditData.primaryLanguage;\n\n                //by default set primary language tab\n                //set selected tab id for title validation\n                scope.selectTabId = scope.primaryLanguage;\n\t\t\t\tscope.selectedTab = function(event, languageId) {\n\t\t\t\t\tevent.preventDefault();\n                    scope.selectTabId = languageId;\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t  * Generate slug\n\t\t\t\t  *\n\t\t\t\t  * @return  void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\t/*scope.generateSlug = function(string, language_id, primary_language) {\n\t\t\t\t\tif (language_id == primary_language) {\n\t\t\t\t\t\tscope.articleData.slug = __globals.slug(string);\n\t\t\t\t\t}\n\t\t\t\t}*/\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function(status) {\n\n                \tscope.articleData.status = status;\n                    __Form.process({\n                        'apiURL': 'manage.article.write.update',\n                        'articleIdOrUid'   : articleIdOrUid,\n                        'projectUid' : scope.projectUid,\n                        'requestType' : scope.requestType\n                    }, scope).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            if (status == 3) {\n                                $state.go('project_articles', {'projectUid': scope.projectUid, versionUid : scope.version_info._uid });\n                            }\n                        });    \n                    });\n\n                };\n\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Article Edit Controller ends here\n\n        /**\n          * Article Content Details Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('ArticleContentDetailsController', [\n            '$scope',\n            'ArticleContentData',\n            function ($scope, ArticleContentData) {\n\n                var scope = this;\n                scope.article_content = ArticleContentData.article_content;\n            \n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])         \n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Language\n*  File       : LanguageDataServices.js  \n*  Engine     : LanguageServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.LanguageDataServices', [])\n        .service('LanguageDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            LanguageDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function LanguageDataService($q, __DataStore, appServices) {\n\n            \n            /*\n            Get Add Support Data\n            -------------------------------------------------------------- */\n            this.getAddSupportData = function() {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch('manage.language.read.support_data')\n                    .success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n            /*\n            Get Edit Support Data\n            -------------------------------------------------------------- */\n            this.getEditSupportData = function(languageIdOrUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL': 'manage.language.read.update.data',\n                    'languageIdOrUid'   : languageIdOrUid\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n        \n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n\n        };\n\n})(window, window.angular);","/*!\n*  Component  : Language\n*  File       : Language.js\n*  Engine     : Language\n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.LanguageEngine', [])\n\n        /**\n          * Language Controller\n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('LanguageController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n        /**\n        * Language List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object LanguageDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('LanguageListController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'LanguageDataService',\n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope, LanguageDataService) {\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"name\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : \"_id\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : \"is_rtl\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#languageActionColumnTemplate\"\n                    }\n                ],\n                scope   = this;\n\n                /**\n                * Get general user test as a datatable source object\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.languageDataTable = __DataStore.dataTable('#lwLanguageList', {\n                    url         : 'manage.language.read.list',\n                    dtOptions   : {\n                        \"searching\": true\n                    },\n                    columnsData : dtColumnsData,\n                    scope       : $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.languageDataTable);\n                };\n\n                // when add new record\n                $scope.$on('language_added_or_updated', function (data) {\n\n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n               /**\n                * Language delete\n                *\n                * inject LanguageIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function(languageIdOrUid, languagename) {\n\n                \tscope.languagename = languagename;\n\n                \t_.defer(function(){\n\n                        var lwLanguageDelete = $('#lwLanguageDelete');\n\n                        __globals.showConfirmation({\n                            html                : lwLanguageDelete .attr('data-message'),\n                            confirmButtonText   : lwLanguageDelete .attr('data-delete-button-text')\n                        },\n                        function() {\n\n                        \t__DataStore.post({\n\t                            'apiURL' : 'manage.language.write.delete',\n\t                            'languageIdOrUid' : languageIdOrUid\n\t                        }).success(function(responseData) {\n\n\t\t\t\t\t\t\t\tvar message = responseData.data.message;\n\n                                appServices.processResponse(responseData, {\n\n                                        error : function() {\n\n                                            __globals.showConfirmation({\n                                                title   : 'Deleted!',\n                                                text    : message,\n                                                type    : 'error'\n                                            });\n\n                                        }\n                                    },\n                                    function() {\n\n                                        __globals.showConfirmation({\n                                            title   : 'Deleted!',\n                                            text    : lwLanguageDelete .attr('success-msg'),\n                                            type    : 'success'\n                                        });\n                                        scope.reloadDT();   // reload datatable\n\n                                    }\n                                );\n\t                        });\n                        })\n                   });\n                };\n\n            /*\n            add dialog\n            ------------------------------------------------------------ */\n            scope.openAddDialog = function() {\n\n                appServices.showDialog(scope, {\n                    templateUrl     : __globals.getTemplateURL(\"language.add-dialog\"),\n                    controller : 'LanguageAddController as languageAddCtrl',\n                }, function(promiseObj) {\n\n                    if (_.has(promiseObj.value, 'language_added_or_updated') && promiseObj.value.language_added_or_updated) {\n\n                        scope.reloadDT();\n                    }\n\n                });\n\n            };\n\n            /*\n            edit dialog\n            ------------------------------------------------------------ */\n            scope.openEditDialog = function(languageIdOrUid) {\n\n                appServices.showDialog({\n                    'languageIdOrUid' : languageIdOrUid\n                }, {\n                    templateUrl     : __globals.getTemplateURL(\"language.edit-dialog\"),\n                    controller : 'LanguageEditController as languageEditCtrl',\n                    resolve : {\n                        languageEditData : function() {\n                            return LanguageDataService\n                                .getEditSupportData(languageIdOrUid);\n                        }\n                    }\n                }, function(promiseObj) {\n\n                    if (_.has(promiseObj.value, 'language_added_or_updated') && promiseObj.value.language_added_or_updated) {\n\n                        scope.reloadDT();\n                    }\n\n\n                });\n            };\n\n\n        }\n        ])\n        // Language List Controller ends here\n\n        /**\n        * Language Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('LanguageAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope ) {\n\n                var scope = this;\n\n                scope.showLoader = true;\n                scope  = __Form.setup(scope, 'language_form', 'languageData', {\n                    secured : true,\n                    unsecuredFields : ['name', 'code']\n                });\n                scope.languageData.status = 1;\n                scope.languageData.is_rtl = 2;\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('manage.language.write.create', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog({\n                                'language_added_or_updated': true,\n                                'add_language_data': responseData.data.addLanguageData\n                            });\n                        });\n\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // LanguageAddController ends here\n\n        /**\n        * Language Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object languageEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('LanguageEditController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'languageEditData',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope , languageEditData) {\n\n            var scope = this;\n            scope.showLoader = true;\n\n            scope  = __Form.setup(scope, 'language_form', 'languageData', {\n                    secured : true,\n                    unsecuredFields : ['name']\n            });\n\n            var requestData = languageEditData;\n            scope = __Form.updateModel(scope, requestData.editData);\n            scope.showLoader = false;\n\n            var languageIdOrUid  = $scope.ngDialogData.languageIdOrUid;\n\n            /**\n            * Submit form\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n\n                __Form.process({\n                    'apiURL': 'manage.language.write.update',\n                    'languageIdOrUid'   : languageIdOrUid\n                }, scope).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog( {'language_added_or_updated' : true} );\n                        });\n                });\n\n            };\n\n            /**\n            * Close dialog\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n        }\n    ])\n    // Language Edit Controller ends here\n\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : Version\n*  File       : VersionDataServices.js  \n*  Engine     : VersionServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.VersionDataServices', [])\n        .service('VersionDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            VersionDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function VersionDataService($q, __DataStore, appServices) {\n\n            /*\n            Get Project Info Support Data\n            -------------------------------------------------------------- */\n            this.getProjectInfo = function(projectIdOrUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL'          : 'manage.project.version.read.project_info',\n                    'projectIdOrUid'  : projectIdOrUid\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                    \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get Versions\n            -------------------------------------------------------------- */\n            this.getVersions = function(projectIdOrUid) {\n        \n                //create a differed object\n                var defferedObject = $q.defer();\n        \n                __DataStore.fetch({\n                    'apiURL'          : 'manage.project.version.read.list',\n                    'projectIdOrUid'  : projectIdOrUid\n                }).success(function(responseData) {\n        \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                    \n                });\n        \n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            \n            /*\n            Get Add Support Data\n            -------------------------------------------------------------- */\n            this.getAddSupportData = function(projectIdOrUid) {\n\n                //create a differed object\n                var defferedObject = $q.defer();\n\n                __DataStore.fetch({\n                    'apiURL': 'manage.project.version.read.support_data',\n                    'projectIdOrUid'   : projectIdOrUid\n                }).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n\n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get Edit Support Data\n            -------------------------------------------------------------- */\n            this.getEditSupportData = function(projectIdOrUid, versionUid) {\n\n                //create a differed object\n                var defferedObject = $q.defer();\n\n                __DataStore.fetch({\n                    'apiURL': 'manage.project.version.read.update.data',\n                    'projectIdOrUid'   : projectIdOrUid,\n                    'versionUid'       : versionUid\n                }).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n\n                //return promise to caller          \n                return defferedObject.promise; \n            };\n\n            /*\n            Get version support Data\n            -------------------------------------------------------------- */\n            this.getVersionSupportData = function(projectIdOrUid, versionUid) {\n\n                //create a differed object\n                var defferedObject = $q.defer();\n\n                __DataStore.fetch({\n                    'apiURL': 'manage.project.version.read.get_support_data',\n                    'projectIdOrUid'   : projectIdOrUid,\n                    'versionUid'       : versionUid\n                }).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);\n                    }); \n                });\n\n                //return promise to caller          \n                return defferedObject.promise; \n            };\n        };\n\n})(window, window.angular);\n","/*!\n*  Component  : Version\n*  File       : Version.js  \n*  Engine     : Version \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.VersionEngine', [])\n\n         \n        /**\n        * Version List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object VersionDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('VersionListController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',                \n            'ProjectInfo',\n            'GetVersions',\n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope, ProjectInfo, GetVersions){\n\n            var scope = this;\n            scope.projectInfo = ProjectInfo.info;\n            scope.versions    = GetVersions.versionList;\n            scope.projectUid  = scope.projectInfo._uid;\n            scope.projectIdOrUid  = $state.params.projectIdOrUid;\n\n            scope.getVersions = function() {\n\n                __DataStore.fetch({\n                    'apiURL'         : 'manage.project.version.read.list',\n                    'projectIdOrUid' : $state.params.projectIdOrUid\n                }).success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                        scope.versions = responseData.data.versionList;\n                    }); \n\n                });\n            };\n\n            /**\n            * version delete \n            *\n            * inject versionIdUid\n            *\n            * @return    void\n            *---------------------------------------------------------------- */\n\n            scope.delete = function(versionUid, version) {\n\n                scope.deletingTagName = _.unescape(version);\n\n                _.defer(function(){\n\n                    var $lwVersionDeleteConfirm = $('#lwVersionDeleteConfirm');\n                    scope.deleteText = $lwVersionDeleteConfirm .attr('data-message');\n                    scope.deleteConfirmBtnText = $lwVersionDeleteConfirm .attr('data-delete-button-text');\n                    scope.successMsgText = $lwVersionDeleteConfirm .attr('success-msg');\n\n                    __globals.showConfirmation({\n                        html                : scope.deleteText,\n                        confirmButtonText   : scope.deleteConfirmBtnText\n                    },\n                    function() {\n\n                        __DataStore.post({\n                            'apiURL' : 'manage.project.version.write.delete',\n                            'projectIdOrUid' : scope.projectUid,\n                            'versionUid' : versionUid\n                        }).success(function(responseData) {\n                        \n                            var message = responseData.data.message;\n\n                            appServices.processResponse(responseData, {\n\n                                error : function() {\n\n                                    __globals.showConfirmation({\n                                        title   : 'Deleted!',\n                                        text    : message,\n                                        type    : 'error'\n                                    });\n                                }\n                            },\n                            function() {\n\n                                __globals.showConfirmation({\n                                    title   : 'Deleted!',\n                                    text    : scope.successMsgText,\n                                    type    : 'success'\n                                });\n                                \n                                scope.getVersions();   // reload datatable\n\n                            });\n\n                        });\n                    })\n\n                });\n    \n            }; \n            \n            /*\n            add dialog\n            ------------------------------------------------------------ */\n            scope.openAddDialog = function(projectIdOrUid) {\n\n                appServices.showDialog({\n                    'projectUid' : projectIdOrUid\n                }, {\n                    templateUrl : __globals.getTemplateURL(\"version.add-dialog\"),\n                    controller  : 'VersionAddController as versionAddCtrl',\n                    resolve : {\n                        versionAddData : ['VersionDataService', function(VersionDataService) {\n                            return VersionDataService.getAddSupportData(projectIdOrUid);\n                        }]\n                    }\n                }, function(promiseObj) {\n\n                    if (_.has(promiseObj.value, 'version_added') \n                    && promiseObj.value.version_added) {\n\n                        scope.getVersions();\n                    }\n\n                });\n\n            };\n\n            $scope.$on('load_versions_list', function(event, data) {\n            \tscope.getVersions();\n        \t});\n\n            /*\n            edit dialog\n            ------------------------------------------------------------ */\n            scope.openEditDialog = function(versionUid) {\n \n                appServices.showDialog({\n                    'projectIdOrUid' : scope.projectUid,\n                    'projectId'    : scope.projectInfo._id\n                }, {\n                    templateUrl : __globals.getTemplateURL(\"version.edit-dialog\"),\n                    controller : 'VersionEditController as versionEditCtrl',\n                    resolve : {\n                        versionEditData : ['VersionDataService', function(VersionDataService) {\n                            return VersionDataService.getEditSupportData(scope.projectUid, versionUid);\n                        }]\n                    }\n                }, function(promiseObj) {\n\n                    if (_.has(promiseObj.value, 'version_added') && promiseObj.value.version_added) {\n                        scope.getVersions();\n                    }\n\n\n                });\n            };\n\n            scope.showEmbedScriptDialog = function(projectSlug, versionSlug, title) {\n\n\t\t\t\tappServices.showDialog({\n\t\t\t\t\t'projectSlug' : projectSlug,\n\t\t\t\t\t'versionSlug' : versionSlug,\n                    'embededType': 2\n\t\t\t\t}, {\n                    templateUrl : \"embed.embed-script-dialog\",\n                    controller  : 'EmbedScriptDialogController as EmbedScriptDialogCtrl',\n                }, function(promiseObj) {\n                });\n\n\t\t\t}\n\n        }\n        ])\n        // Version List Controller ends here\n\n        /**\n        * Version Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('VersionAddController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            'versionAddData',\n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope, versionAddData) {\n\n                var scope = this;\n                scope.projectUid = $scope.ngDialogData.projectUid;\n                scope.existingVersions = versionAddData.existing_versions;\n                scope.existing_versions_count = versionAddData.existing_versions_count;\n                scope.showLoader = true;\n                scope  = __Form.setup(scope, 'version_form', 'versionData', {\n                    secured : false,\n                    unsecuredFields : ['version']\n                });\n                \n                scope.versionData.status = 1;\n                scope.versionData.projects__id = versionAddData.projectId;\n                \n                if (parseInt(scope.existing_versions_count) == 0) {\n                \tscope.versionData.is_primary = 1;\n                }\n\n                /**\n                  * Submit form\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    __Form.process({\n                        'apiURL' : 'manage.project.version.write.create',\n                        'projectIdOrUid' : scope.projectUid\n                    }, scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog( {'version_added' : true} );\n                        });    \n\n                    });\n                };\n\n\t\t\t\tscope.changeStatus = function(isprimary) {\n\t\t\t\t\tif (isprimary == '1') {\n\t\t\t\t\t\tscope.versionData.status = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        // VersionAddController ends here\n\n        /**\n        * Version Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('VersionEditController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',\n            'versionEditData',           \n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope, versionEditData) {\n\n            var scope = this;\n                scope.showLoader = true;\n                scope.projectId = $scope.ngDialogData.projectId;\n\n                scope  = __Form.setup(scope, 'version_form', 'versionData', {\n                    secured : false,\n                    unsecuredFields : []\n                });\n\n                var versionData = versionEditData.versionData;\n\n                scope = __Form.updateModel(scope, versionData);\n\n                scope.showLoader = false;\n\n                /**\n                * Submit form\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process({\n                        'apiURL'           : 'manage.project.version.write.update',\n                        'projectIdOrUid'   : scope.projectId,\n                        'versionUid'       : versionData._uid\n                    }, scope).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog( {'version_added' : true} );\n                        });    \n                    });\n\n                };\n\n\t\t\t\tscope.changeStatus = function(isprimary) {\n\t\t\t\t\tif (isprimary == '1') {\n\t\t\t\t\t\tscope.versionData.status = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n                /**\n                * Close dialog\n                *\n                * @return  void\n                *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n\n            }\n\n        ])\n        // Version Edit Controller ends here\n\n\n         \n    ;\n\n})(window, window.angular);"]}